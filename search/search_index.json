{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CoderDojo Twin Cities Web and User Experience Resources \u00b6 Welcome to the Web/User Experience repository for teachers and mentors. We are developing our own Introduction to HTML courses on this site and we also have links to other resources for your students.","title":"Home"},{"location":"#coderdojo-twin-cities-web-and-user-experience-resources","text":"Welcome to the Web/User Experience repository for teachers and mentors. We are developing our own Introduction to HTML courses on this site and we also have links to other resources for your students.","title":"CoderDojo Twin Cities Web and User Experience Resources"},{"location":"contact/","text":"Contacts \u00b6 General Code Savvy Contact \u00b6 kidscode@codesavvy.org Specific questions on this repository \u00b6 Dan McCreary Dan.McCreary@gmail.com","title":"Contact"},{"location":"contact/#contacts","text":"","title":"Contacts"},{"location":"contact/#general-code-savvy-contact","text":"kidscode@codesavvy.org","title":"General Code Savvy Contact"},{"location":"contact/#specific-questions-on-this-repository","text":"Dan McCreary Dan.McCreary@gmail.com","title":"Specific questions on this repository"},{"location":"learning-objectives/","text":"Web-UX Learning Objectives \u00b6 Target audience \u00b6 A typical 10-12 year old student that wants to learn how to create their own web pages. Typical Sessions \u00b6 Three one-hour sessions Sample HTML Topics \u00b6 Introduction to HTML Markup - begin and end tags HTML file structure - html, head and body Bold, italic and underline Adding hypertext links Images Lists: unordered and ordered Tables: rows and columns Description lists Code Block quotes Inline quotes Subscripts and superscripts HTML colors: font, and background color Comments Sample CSS Topics \u00b6 Why use CSS CSS syntax Changing default behavior: font Adding class attributes to HTML elements CSS Selectors Location styling Styling based on state: hover and visited Combining selectors External vs. Inline CSS Inline styles At rules Shorthands Comments White space Borders Using borders to debug layouts Resources for learning Web \u00b6 CodePen JSFiddle Repl.it","title":"Learning Objectives"},{"location":"learning-objectives/#web-ux-learning-objectives","text":"","title":"Web-UX Learning Objectives"},{"location":"learning-objectives/#target-audience","text":"A typical 10-12 year old student that wants to learn how to create their own web pages.","title":"Target audience"},{"location":"learning-objectives/#typical-sessions","text":"Three one-hour sessions","title":"Typical Sessions"},{"location":"learning-objectives/#sample-html-topics","text":"Introduction to HTML Markup - begin and end tags HTML file structure - html, head and body Bold, italic and underline Adding hypertext links Images Lists: unordered and ordered Tables: rows and columns Description lists Code Block quotes Inline quotes Subscripts and superscripts HTML colors: font, and background color Comments","title":"Sample HTML Topics"},{"location":"learning-objectives/#sample-css-topics","text":"Why use CSS CSS syntax Changing default behavior: font Adding class attributes to HTML elements CSS Selectors Location styling Styling based on state: hover and visited Combining selectors External vs. Inline CSS Inline styles At rules Shorthands Comments White space Borders Using borders to debug layouts","title":"Sample CSS Topics"},{"location":"learning-objectives/#resources-for-learning-web","text":"CodePen JSFiddle Repl.it","title":"Resources for learning Web"},{"location":"resources/","text":"Web Resources \u00b6 Here are some resources for teaching web and UX concepts. Mozilla course materials: \u00b6 Mozilla Getting Started with HTML Mozilla Getting Started with CSS Mozilla Getting Started with Javascript W3 Schools resources: \u00b6 w3Schools HTML Tutorial w3Schools CSS Tutorial w3Schools Javascript Tutorial GitHub \u00b6 GitHub's Introduction to HTML Pluralsight \u00b6 Teaching Kids HTML Pluralsight This link is to a set of many short videos on teaching HTML to kids. Very well produced. There may be some fees for accessing this content.","title":"Resources"},{"location":"resources/#web-resources","text":"Here are some resources for teaching web and UX concepts.","title":"Web Resources"},{"location":"resources/#mozilla-course-materials","text":"Mozilla Getting Started with HTML Mozilla Getting Started with CSS Mozilla Getting Started with Javascript","title":"Mozilla course materials:"},{"location":"resources/#w3-schools-resources","text":"w3Schools HTML Tutorial w3Schools CSS Tutorial w3Schools Javascript Tutorial","title":"W3 Schools resources:"},{"location":"resources/#github","text":"GitHub's Introduction to HTML","title":"GitHub"},{"location":"resources/#pluralsight","text":"Teaching Kids HTML Pluralsight This link is to a set of many short videos on teaching HTML to kids. Very well produced. There may be some fees for accessing this content.","title":"Pluralsight"},{"location":"css/00-intro/","text":"Introduction to CSS \u00b6 Making a website often uses these three coding languages: HTML, CSS, and Javascript. HTML includes the basic building blocks- the words you see on the website and more. Working hand in hand with HTML, CSS can change color, sizing, and spacing. In other words, CSS changes the style. If you don't want your website to change at all, HTML and CSS have you covered. Otherwise, Javascript is used to make a website interactive.","title":"Introduction"},{"location":"css/00-intro/#introduction-to-css","text":"Making a website often uses these three coding languages: HTML, CSS, and Javascript. HTML includes the basic building blocks- the words you see on the website and more. Working hand in hand with HTML, CSS can change color, sizing, and spacing. In other words, CSS changes the style. If you don't want your website to change at all, HTML and CSS have you covered. Otherwise, Javascript is used to make a website interactive.","title":"Introduction to CSS"},{"location":"css/01-font-color/","text":"CSS Change Font Color \u00b6 Make all the paragraph text blue. 1 2 3 4 p { color : blue ; text-align : center ; } Sample rendering... Links to Example \u00b6 Test on JSFiddle Experiments \u00b6 Change the color of the paragraph Change the alignment to be left or right","title":"Font Color"},{"location":"css/01-font-color/#css-change-font-color","text":"Make all the paragraph text blue. 1 2 3 4 p { color : blue ; text-align : center ; } Sample rendering...","title":"CSS Change Font Color"},{"location":"css/01-font-color/#links-to-example","text":"Test on JSFiddle","title":"Links to Example"},{"location":"css/01-font-color/#experiments","text":"Change the color of the paragraph Change the alignment to be left or right","title":"Experiments"},{"location":"css/02-applies-style-to-indicated-elements/","text":"CSS Key Idea of Applying Style to Indicated HTML Elements \u00b6 This lab covers an introduction to CSS syntax. Prerequisite: HTML tags To add style, you need to specify the style changes (make it blue? make it line up with the right side of the page?) and what parts of the webpage should have those style changes. Talking about the parts of the webpage involves at least beginner level knowledge of HTML elements. The following are examples of using CSS to say what style changes you want and what HTML elements you want to affect. Example CSS: 1 2 3 h1 { color : orange ; } Example HTML: 1 2 3 4 5 6 7 <!DOCTYPE html> < html lang = \"en\" > < body > < h1 > The Most Commonly Grown Tree Fruit Worldwide: the Orange </ h1 > < p > Oranges can grow in Florida and California. </ p > </ body > </ html > A website would combine the above CSS (style) and HTML (content) to show: Link to Example \u00b6 Test on JSFiddle Experiment Ideas \u00b6 Change the color of the header Add to the CSS to change the color of the paragraph","title":"Key Idea- Applying Style"},{"location":"css/02-applies-style-to-indicated-elements/#css-key-idea-of-applying-style-to-indicated-html-elements","text":"This lab covers an introduction to CSS syntax. Prerequisite: HTML tags To add style, you need to specify the style changes (make it blue? make it line up with the right side of the page?) and what parts of the webpage should have those style changes. Talking about the parts of the webpage involves at least beginner level knowledge of HTML elements. The following are examples of using CSS to say what style changes you want and what HTML elements you want to affect. Example CSS: 1 2 3 h1 { color : orange ; } Example HTML: 1 2 3 4 5 6 7 <!DOCTYPE html> < html lang = \"en\" > < body > < h1 > The Most Commonly Grown Tree Fruit Worldwide: the Orange </ h1 > < p > Oranges can grow in Florida and California. </ p > </ body > </ html > A website would combine the above CSS (style) and HTML (content) to show:","title":"CSS Key Idea of Applying Style to Indicated HTML Elements"},{"location":"css/02-applies-style-to-indicated-elements/#link-to-example","text":"Test on JSFiddle","title":"Link to Example"},{"location":"css/02-applies-style-to-indicated-elements/#experiment-ideas","text":"Change the color of the header Add to the CSS to change the color of the paragraph","title":"Experiment Ideas"},{"location":"css/03-font-and-font-families/","text":"CSS Change Font and Font Families \u00b6 This lab covers using CSS to change font. Not all computers can show all fonts. Therefore, to change font with css, you specify a list with backups. The font-family property first looks to display the specific font name such as Arial that in the list. In case some computer can't display that font, you can list backup fonts. Finally, you should list a font family as a catch-all to make sure the displayed font is at least in the right font family. Fonts are grouped into three major families: serif, sans-serif, and monospace. The below image from w3schools shows what a serif is. Serif fonts have serifs and sans-serif, sans meaning without, don't. As for monospace family fonts, those fonts all have letters with the same width as the below image from design company Envato shows: There are two other lesser used font families: cursive and fantasy. CSS: 1 2 3 p { font-family : American Typewriter , serif ; } HTML: 1 2 3 4 5 6 7 <!DOCTYPE html> < html lang = \"en\" > < body > < h2 > A font for an annoucement about [something you're excited for]: </ h2 > < p > Will this font do the trick? </ p > </ body > </ html > A website would combine the above CSS and HTML to show: Link to Example \u00b6 Test on JSFiddle Experiment Ideas \u00b6 Personalize the header & change fonts A List of Built-in Font Options If the HTML link and head elements are understood, try google fonts A List of (Free) Google Fonts","title":"Font and Font Families"},{"location":"css/03-font-and-font-families/#css-change-font-and-font-families","text":"This lab covers using CSS to change font. Not all computers can show all fonts. Therefore, to change font with css, you specify a list with backups. The font-family property first looks to display the specific font name such as Arial that in the list. In case some computer can't display that font, you can list backup fonts. Finally, you should list a font family as a catch-all to make sure the displayed font is at least in the right font family. Fonts are grouped into three major families: serif, sans-serif, and monospace. The below image from w3schools shows what a serif is. Serif fonts have serifs and sans-serif, sans meaning without, don't. As for monospace family fonts, those fonts all have letters with the same width as the below image from design company Envato shows: There are two other lesser used font families: cursive and fantasy. CSS: 1 2 3 p { font-family : American Typewriter , serif ; } HTML: 1 2 3 4 5 6 7 <!DOCTYPE html> < html lang = \"en\" > < body > < h2 > A font for an annoucement about [something you're excited for]: </ h2 > < p > Will this font do the trick? </ p > </ body > </ html > A website would combine the above CSS and HTML to show:","title":"CSS Change Font and Font Families"},{"location":"css/03-font-and-font-families/#link-to-example","text":"Test on JSFiddle","title":"Link to Example"},{"location":"css/03-font-and-font-families/#experiment-ideas","text":"Personalize the header & change fonts A List of Built-in Font Options If the HTML link and head elements are understood, try google fonts A List of (Free) Google Fonts","title":"Experiment Ideas"},{"location":"css/04-styling-by-class/","text":"CSS Styling by Class \u00b6 This lab covers styling by class. You know how to style all paragraphs or all headers of a certain size at the same time, but how do we add styling to several, say paragraphs, without changing the styling of all of them? Use classes. Choose a class name & add class=\"the_class_name\" into the opening tag of an HTML element. As for the CSS, the part inside the curly brackets {} is the same. To have the CSS style inside the curly brackets apply to all the HTML elements with a certain class, write a period directly followed by the class name in front of the curly brackets where before you had a type of HTML element. CSS: 1 2 3 . amazon_river_dolphin { color : DeepPink ; } HTML: 1 2 3 4 5 6 7 8 9 <!DOCTYPE html> < html lang = \"en\" > < body > < p > What's the color of an Amazon river dolphin? </ p > < p class = \"amazon_river_dolphin\" > Pink! </ p > < p > Is that true for all river dolphins? </ p > < p class = \"amazon_river_dolphin\" > Nope </ p > </ body > </ html > A website would combine the above CSS and HTML to show: Link to Example \u00b6 Test on JSFiddle Experiment Ideas \u00b6 Change which paragraph elements have the class Change the color to a different word and then to rgb(255, 20, 147) and/or #ff1493 to introduce the idea those other representations also mean the same DeepPink color The w3schools color picker with DeepPink currently selected A further explanation of the different ways to specify a color","title":"Styling by Class"},{"location":"css/04-styling-by-class/#css-styling-by-class","text":"This lab covers styling by class. You know how to style all paragraphs or all headers of a certain size at the same time, but how do we add styling to several, say paragraphs, without changing the styling of all of them? Use classes. Choose a class name & add class=\"the_class_name\" into the opening tag of an HTML element. As for the CSS, the part inside the curly brackets {} is the same. To have the CSS style inside the curly brackets apply to all the HTML elements with a certain class, write a period directly followed by the class name in front of the curly brackets where before you had a type of HTML element. CSS: 1 2 3 . amazon_river_dolphin { color : DeepPink ; } HTML: 1 2 3 4 5 6 7 8 9 <!DOCTYPE html> < html lang = \"en\" > < body > < p > What's the color of an Amazon river dolphin? </ p > < p class = \"amazon_river_dolphin\" > Pink! </ p > < p > Is that true for all river dolphins? </ p > < p class = \"amazon_river_dolphin\" > Nope </ p > </ body > </ html > A website would combine the above CSS and HTML to show:","title":"CSS Styling by Class"},{"location":"css/04-styling-by-class/#link-to-example","text":"Test on JSFiddle","title":"Link to Example"},{"location":"css/04-styling-by-class/#experiment-ideas","text":"Change which paragraph elements have the class Change the color to a different word and then to rgb(255, 20, 147) and/or #ff1493 to introduce the idea those other representations also mean the same DeepPink color The w3schools color picker with DeepPink currently selected A further explanation of the different ways to specify a color","title":"Experiment Ideas"},{"location":"css/05-css-selectors/","text":"CSS- CSS Selectors \u00b6 This lab covers CSS selectors. So far, we've covered selecting all paragraph elements or selecting all elements with a certain class to have a certain style applied. Another common way to select elements is by id. Ids are generally a unique name for a single HTML element. Similarly to how selecting by class is .class, selecting by id is #id. CSS: 1 2 3 4 # best { color : green ; font-family : Verdana , Arial , sans-serif ; } HTML: 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> < html lang = \"en\" > < body > < ol > < li id = \"best\" > Fav Food </ li > < li > 2nd Fav Food </ li > < li > 3rd Fav Food </ li > </ ol > </ body > </ html > A website would combine the above CSS and HTML to show: Link to Example \u00b6 Test on JSFiddle Experiment Ideas \u00b6 Add an id to the third favorite food and style it differently than the first favorite food Change the style within the {}","title":"CSS Selectors"},{"location":"css/05-css-selectors/#css-css-selectors","text":"This lab covers CSS selectors. So far, we've covered selecting all paragraph elements or selecting all elements with a certain class to have a certain style applied. Another common way to select elements is by id. Ids are generally a unique name for a single HTML element. Similarly to how selecting by class is .class, selecting by id is #id. CSS: 1 2 3 4 # best { color : green ; font-family : Verdana , Arial , sans-serif ; } HTML: 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> < html lang = \"en\" > < body > < ol > < li id = \"best\" > Fav Food </ li > < li > 2nd Fav Food </ li > < li > 3rd Fav Food </ li > </ ol > </ body > </ html > A website would combine the above CSS and HTML to show:","title":"CSS- CSS Selectors"},{"location":"css/05-css-selectors/#link-to-example","text":"Test on JSFiddle","title":"Link to Example"},{"location":"css/05-css-selectors/#experiment-ideas","text":"Add an id to the third favorite food and style it differently than the first favorite food Change the style within the {}","title":"Experiment Ideas"},{"location":"css/06-combining-css-selectors/","text":"CSS Combining CSS Selectors \u00b6 This lab covers combining CSS selectors. Beyond selecting all elements of the same HTML element type or all items with a certain class, you can combine CSS selectors to be more specific in what elements you select. For example, you can select elements that have both of two specified classes by .class1_name.class2_name . Be careful about using periods & no spacing. .class1_name .class2_name with a space in between the two .class_name s selects any element with class2 that is also a descendant of an element with class1. CSS: 1 2 3 4 . Himalayas . China { color : MediumPurple ; font-family : Verdana , Arial , sans-serif ; } Note: < is a reserved character in HTML, and the browser may get confused if you use it as the less than character in text. Therefore, use &entity_name; or &#entity_number; . Entity numbers have wider support. Also, listing multiple words with the quotes after class= means that element has several classes. Note on the content: the first class for each list element below is the mountain range and the following classes are the country/countries that mountain is in according to the source I found. HTML: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <!DOCTYPE html> < html lang = \"en\" > < body > < h3 > Mountains that reach an elevation &lt; 8,000 metres (26,247 ft) </ h3 > < ol > < li class = \"Himalayas Nepal China\" > Mount Everest </ li > < li class = \"Karakoram Pakistan\" > K2 </ li > < li class = \"Himalayas Nepal India\" > Kangchenjunga </ li > < li class = \"Himalayas Nepal China\" > Lhotse </ li > < li class = \"Himalayas Nepal China\" > Makalu </ li > < li class = \"Himalayas Nepal China\" > Cho Oyu </ li > < li class = \"Himalayas Nepal\" > Dhaulagiri </ li > < li class = \"Himalayas Nepal\" > Manaslu </ li > < li class = \"Himalayas Pakistan\" > Nanga Parbat </ li > < li class = \"Himalayas Nepal\" > Annapurna </ li > < li class = \"Karakoram Pakistan China\" > Gasherbrum I </ li > < li class = \"Karakoram Pakistan China\" > Broad Peak </ li > < li class = \"Karakoram Pakistan China\" > Gasherbrum II </ li > < li class = \"Himalayas Tibet\" > Shishapangma </ li > </ ol > < p > source: < a href = \"https://en.wikipedia.org/wiki/List_of_mountains_by_elevation\" > Mountains Greater than 8,000 metres in Elevation </ a > </ p > </ body > </ html > A website would combine the above CSS and HTML to show: Link to Example \u00b6 Test on JSFiddle Note: if you click on a link in JSFiddle instead of right clicking and opening in a new tab, you can always hit run again in the JSFiddle window. Experiment Ideas \u00b6 Change which two classes you're selecting. Use this list of css selectors to test other ways to select HTML elements To talk more about HTML entities, click here","title":"Combining CSS Selectors"},{"location":"css/06-combining-css-selectors/#css-combining-css-selectors","text":"This lab covers combining CSS selectors. Beyond selecting all elements of the same HTML element type or all items with a certain class, you can combine CSS selectors to be more specific in what elements you select. For example, you can select elements that have both of two specified classes by .class1_name.class2_name . Be careful about using periods & no spacing. .class1_name .class2_name with a space in between the two .class_name s selects any element with class2 that is also a descendant of an element with class1. CSS: 1 2 3 4 . Himalayas . China { color : MediumPurple ; font-family : Verdana , Arial , sans-serif ; } Note: < is a reserved character in HTML, and the browser may get confused if you use it as the less than character in text. Therefore, use &entity_name; or &#entity_number; . Entity numbers have wider support. Also, listing multiple words with the quotes after class= means that element has several classes. Note on the content: the first class for each list element below is the mountain range and the following classes are the country/countries that mountain is in according to the source I found. HTML: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <!DOCTYPE html> < html lang = \"en\" > < body > < h3 > Mountains that reach an elevation &lt; 8,000 metres (26,247 ft) </ h3 > < ol > < li class = \"Himalayas Nepal China\" > Mount Everest </ li > < li class = \"Karakoram Pakistan\" > K2 </ li > < li class = \"Himalayas Nepal India\" > Kangchenjunga </ li > < li class = \"Himalayas Nepal China\" > Lhotse </ li > < li class = \"Himalayas Nepal China\" > Makalu </ li > < li class = \"Himalayas Nepal China\" > Cho Oyu </ li > < li class = \"Himalayas Nepal\" > Dhaulagiri </ li > < li class = \"Himalayas Nepal\" > Manaslu </ li > < li class = \"Himalayas Pakistan\" > Nanga Parbat </ li > < li class = \"Himalayas Nepal\" > Annapurna </ li > < li class = \"Karakoram Pakistan China\" > Gasherbrum I </ li > < li class = \"Karakoram Pakistan China\" > Broad Peak </ li > < li class = \"Karakoram Pakistan China\" > Gasherbrum II </ li > < li class = \"Himalayas Tibet\" > Shishapangma </ li > </ ol > < p > source: < a href = \"https://en.wikipedia.org/wiki/List_of_mountains_by_elevation\" > Mountains Greater than 8,000 metres in Elevation </ a > </ p > </ body > </ html > A website would combine the above CSS and HTML to show:","title":"CSS Combining CSS Selectors"},{"location":"css/06-combining-css-selectors/#link-to-example","text":"Test on JSFiddle Note: if you click on a link in JSFiddle instead of right clicking and opening in a new tab, you can always hit run again in the JSFiddle window.","title":"Link to Example"},{"location":"css/06-combining-css-selectors/#experiment-ideas","text":"Change which two classes you're selecting. Use this list of css selectors to test other ways to select HTML elements To talk more about HTML entities, click here","title":"Experiment Ideas"},{"location":"css/07-styling-based-on-state/","text":"CSS Styling based on State \u00b6 This lab covers styling based on state. In addition to selecting by element type, class, or id, CSS can select by state. An example is selecting elements as the mouse hovers over them. Another example is the visited state for links that have already been clicked on (note: this does not appear to work in JSFiddle) CSS: 1 2 3 4 a : hover { color : DarkSlateGray ; font-weight : bold ; } HTML: 1 2 3 4 5 6 7 8 <!DOCTYPE html> < html lang = \"en\" > < body > < a href = \"https://www.w3schools.com/tags/tag_a.asp\" > Click here if you want to know more about the HTML link element! </ a > < br /> < a href = \"https://www.w3schools.com/colors/colors_picker.asp\" > Here's a link to the w3schools CSS color picker </ a > </ body > </ html > This interaction is best viewed live. Try the example below. on JSFiddle. Link to Example \u00b6 Test on JSFiddle Experiment Ideas \u00b6 Make the link being hovered over change font Change the color of links being hovered over with the w3schools color picker","title":"Styling based on State"},{"location":"css/07-styling-based-on-state/#css-styling-based-on-state","text":"This lab covers styling based on state. In addition to selecting by element type, class, or id, CSS can select by state. An example is selecting elements as the mouse hovers over them. Another example is the visited state for links that have already been clicked on (note: this does not appear to work in JSFiddle) CSS: 1 2 3 4 a : hover { color : DarkSlateGray ; font-weight : bold ; } HTML: 1 2 3 4 5 6 7 8 <!DOCTYPE html> < html lang = \"en\" > < body > < a href = \"https://www.w3schools.com/tags/tag_a.asp\" > Click here if you want to know more about the HTML link element! </ a > < br /> < a href = \"https://www.w3schools.com/colors/colors_picker.asp\" > Here's a link to the w3schools CSS color picker </ a > </ body > </ html > This interaction is best viewed live. Try the example below. on JSFiddle.","title":"CSS Styling based on State"},{"location":"css/07-styling-based-on-state/#link-to-example","text":"Test on JSFiddle","title":"Link to Example"},{"location":"css/07-styling-based-on-state/#experiment-ideas","text":"Make the link being hovered over change font Change the color of links being hovered over with the w3schools color picker","title":"Experiment Ideas"},{"location":"css/08-types-of-css/","text":"CSS External vs Internal vs Inline CSS \u00b6 This lab covers External vs Internal vs Inline CSS. So far, the CSS has been listed separately from the HTML (external CSS). However, you can use a style tag within HTML to specify some CSS. This is called internal CSS (example below). A final type of CSS is inline CSS which involves setting a style attribute within an HTML tag. Inline CSS only lets you style one element at a time, so it's often not as useful as the other two types. HTML with CSS in the style tag: 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html lang = \"en\" > < head > < style > p { color : red ;} </ style > </ head > < body > < p > Various species of penguin live on all continents that are partially or totally located in the Sourthern Hemisphere. </ p > </ body > </ html > A website would combine the above CSS and HTML to show: Link to Example \u00b6 Test on JSFiddle Experiment Ideas \u00b6 Change the style within the {} Add a different type of HTML element & style it using the style tag","title":"Types of CSS"},{"location":"css/08-types-of-css/#css-external-vs-internal-vs-inline-css","text":"This lab covers External vs Internal vs Inline CSS. So far, the CSS has been listed separately from the HTML (external CSS). However, you can use a style tag within HTML to specify some CSS. This is called internal CSS (example below). A final type of CSS is inline CSS which involves setting a style attribute within an HTML tag. Inline CSS only lets you style one element at a time, so it's often not as useful as the other two types. HTML with CSS in the style tag: 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html lang = \"en\" > < head > < style > p { color : red ;} </ style > </ head > < body > < p > Various species of penguin live on all continents that are partially or totally located in the Sourthern Hemisphere. </ p > </ body > </ html > A website would combine the above CSS and HTML to show:","title":"CSS External vs Internal vs Inline CSS"},{"location":"css/08-types-of-css/#link-to-example","text":"Test on JSFiddle","title":"Link to Example"},{"location":"css/08-types-of-css/#experiment-ideas","text":"Change the style within the {} Add a different type of HTML element & style it using the style tag","title":"Experiment Ideas"},{"location":"intro-to-bootstrap/01-intro/","text":"Introduction to Bootstrap \u00b6 This course is about Bootstrap , a popular web UI/UX framework for building responsive , mobile-first webpages. Bootstrap was originally created by Twitter, and is now open source for the entire web development community to use. Why Bootstrap? \u00b6 Have you ever opened a web page on your phone and had to zoom in, just to read the text? Bootstrap solves this problem by providing CSS classes and Javascript that help us create web pages that will re-size automatically to the screen size of the browser using the webpage. This is what is known as responsive web design. Websites used to be created for desktop computers, but now that most people access the web though a mobile device now (such as an iPhone, or iPad), webpages are expected to re-size to still be useful for someone with a 4\" phone screen, as well as someone with a 15\" monitor. Pre-requisites \u00b6 This chapter assumes a basic understanding of how HTML, CSS, and Javascript are loaded to a web page. Topics \u00b6 Here are the topics we will cover in this course: Introduction to Bootstrap - The current page Getting Started - How we can add Bootstrap to our web page Bootstrap Containers - The base buidling block of Bootstrap pages Intro to grids - Using the grid to create responsive containers Typography - Headings, paragraphs, code, and quotes Buttons - Bootstrap standard buttons Forms - Bootstrap standard forms Modals - Pop up modals","title":"Introduction"},{"location":"intro-to-bootstrap/01-intro/#introduction-to-bootstrap","text":"This course is about Bootstrap , a popular web UI/UX framework for building responsive , mobile-first webpages. Bootstrap was originally created by Twitter, and is now open source for the entire web development community to use.","title":"Introduction to Bootstrap"},{"location":"intro-to-bootstrap/01-intro/#why-bootstrap","text":"Have you ever opened a web page on your phone and had to zoom in, just to read the text? Bootstrap solves this problem by providing CSS classes and Javascript that help us create web pages that will re-size automatically to the screen size of the browser using the webpage. This is what is known as responsive web design. Websites used to be created for desktop computers, but now that most people access the web though a mobile device now (such as an iPhone, or iPad), webpages are expected to re-size to still be useful for someone with a 4\" phone screen, as well as someone with a 15\" monitor.","title":"Why Bootstrap?"},{"location":"intro-to-bootstrap/01-intro/#pre-requisites","text":"This chapter assumes a basic understanding of how HTML, CSS, and Javascript are loaded to a web page.","title":"Pre-requisites"},{"location":"intro-to-bootstrap/01-intro/#topics","text":"Here are the topics we will cover in this course: Introduction to Bootstrap - The current page Getting Started - How we can add Bootstrap to our web page Bootstrap Containers - The base buidling block of Bootstrap pages Intro to grids - Using the grid to create responsive containers Typography - Headings, paragraphs, code, and quotes Buttons - Bootstrap standard buttons Forms - Bootstrap standard forms Modals - Pop up modals","title":"Topics"},{"location":"intro-to-bootstrap/02-getting-started/","text":"Getting Started \u00b6 (with Bootstrap 4) It's easy to add Bootstrap to our webpage. Just like how we can reference CSS, and JavaScript files from our HTML file, we can do the same to add Bootstrap, except the CSS and JavaScript is a file from the internet. You can get started on your favorite online/offline code editor. CSS \u00b6 In your HTML file, add the following <link> element in the contents of your <head> element. 1 < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity = \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin = \"anonymous\" > Javascript \u00b6 Bootstrap requires some JavaScript packages to work. Add these <script> s at the end of your page, before the end of your <body> . This will tell the web browser to load the HTML content before the JavaScript, and allow the web page to load faster. 1 2 3 < script src = \"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity = \"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity = \"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin = \"anonymous\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity = \"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin = \"anonymous\" ></ script > Starter Template \u00b6 This starter template allows you to quickly create a Bootstrap page. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 <!doctype html> < html lang = \"en\" > < head > <!-- Required meta tags --> < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > <!-- Bootstrap CSS --> < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity = \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin = \"anonymous\" > < title > Hello, world! </ title > </ head > < body > < h1 > Hello, world! </ h1 > <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> < script src = \"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity = \"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity = \"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin = \"anonymous\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity = \"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin = \"anonymous\" ></ script > </ body > </ html > Meta Tag \u00b6 You may have noticed something unfamiliar, the <meta> tag with its attribute, name value of \"viewport\" . This is used to ensure our CSS scales the same across all devices. 1 < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > HTML example \u00b6 Add the following to our HTML document, and examine what happens when we change the size of our browser. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 < div class = \"jumbotron text-center\" > < h1 > My First Bootstrap Page </ h1 > < p > Resize this responsive page to see the effect! </ p > </ div > < div class = \"container\" > < div class = \"row\" > < div class = \"col-sm-4\" > < h3 > Column 1 </ h3 > < p > Lorem ipsum dolor.. </ p > </ div > < div class = \"col-sm-4\" > < h3 > Column 2 </ h3 > < p > Lorem ipsum dolor.. </ p > </ div > < div class = \"col-sm-4\" > < h3 > Column 3 </ h3 > < p > Lorem ipsum dolor.. </ p > </ div > </ div > </ div > Note on Content Delivery Networks (CDN) \u00b6 What's a CDN and what's up with this \" integrity check \"? You may recall how we imported the Bootstrap CSS file. 1 < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity = \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin = \"anonymous\" > Breaking it down \u00b6 Web Resources \u00b6 We can see that the link has an attribute, href with the value, \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" . This href \"points\" to a web resource (a file) named bootstrap.min.css Web page loading \u00b6 A Content Delivery Network (CDN) is a central point where a client (such as a web browser) can request a web file. The CDN can automatically pick the geographically closest, available web server that has the file, in order to improve web page load times. Companies and web developers use CDNs all the time to host static content , files that are not expected to change. For example, say I am on the East Coast, Boston, Massachusetts, and using my laptop (the client ), I access my friend's photo sharing website, which he hosts entirely on a computer (the host ) in his home on the West Coast, San Francisco, California. The speed at which my friend can transfer these photos to my computer is not only limited by the network speed of my friend's home-internet, but also the distance between the client and the host. Specifically, the speed of data transfer between a client, and host is limited by the speed of light (3 * 10^8 m/s in a vacuum). For example, the distance between New York and Paris (in a straight line) is about 5,800 kilometers. In order for light to travel that distance and back, it would take 40 milliseconds . We consider this to be a theoretical minimum ping between two locations. Real-world pings are slower due to many reasons such as the real-distance of the fiber optic cables, the speed of light in the cable material, delays in routing services, etc. Resources \u00b6 Bootstrap Offical Documentation Getting Started W3 Schools Bootstrap 4 Tutorial","title":"Getting Started"},{"location":"intro-to-bootstrap/02-getting-started/#getting-started","text":"(with Bootstrap 4) It's easy to add Bootstrap to our webpage. Just like how we can reference CSS, and JavaScript files from our HTML file, we can do the same to add Bootstrap, except the CSS and JavaScript is a file from the internet. You can get started on your favorite online/offline code editor.","title":"Getting Started"},{"location":"intro-to-bootstrap/02-getting-started/#css","text":"In your HTML file, add the following <link> element in the contents of your <head> element. 1 < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity = \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin = \"anonymous\" >","title":"CSS"},{"location":"intro-to-bootstrap/02-getting-started/#javascript","text":"Bootstrap requires some JavaScript packages to work. Add these <script> s at the end of your page, before the end of your <body> . This will tell the web browser to load the HTML content before the JavaScript, and allow the web page to load faster. 1 2 3 < script src = \"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity = \"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity = \"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin = \"anonymous\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity = \"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin = \"anonymous\" ></ script >","title":"Javascript"},{"location":"intro-to-bootstrap/02-getting-started/#starter-template","text":"This starter template allows you to quickly create a Bootstrap page. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 <!doctype html> < html lang = \"en\" > < head > <!-- Required meta tags --> < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > <!-- Bootstrap CSS --> < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity = \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin = \"anonymous\" > < title > Hello, world! </ title > </ head > < body > < h1 > Hello, world! </ h1 > <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> < script src = \"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity = \"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity = \"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin = \"anonymous\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity = \"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin = \"anonymous\" ></ script > </ body > </ html >","title":"Starter Template"},{"location":"intro-to-bootstrap/02-getting-started/#meta-tag","text":"You may have noticed something unfamiliar, the <meta> tag with its attribute, name value of \"viewport\" . This is used to ensure our CSS scales the same across all devices. 1 < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" >","title":"Meta Tag"},{"location":"intro-to-bootstrap/02-getting-started/#html-example","text":"Add the following to our HTML document, and examine what happens when we change the size of our browser. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 < div class = \"jumbotron text-center\" > < h1 > My First Bootstrap Page </ h1 > < p > Resize this responsive page to see the effect! </ p > </ div > < div class = \"container\" > < div class = \"row\" > < div class = \"col-sm-4\" > < h3 > Column 1 </ h3 > < p > Lorem ipsum dolor.. </ p > </ div > < div class = \"col-sm-4\" > < h3 > Column 2 </ h3 > < p > Lorem ipsum dolor.. </ p > </ div > < div class = \"col-sm-4\" > < h3 > Column 3 </ h3 > < p > Lorem ipsum dolor.. </ p > </ div > </ div > </ div >","title":"HTML example"},{"location":"intro-to-bootstrap/02-getting-started/#note-on-content-delivery-networks-cdn","text":"What's a CDN and what's up with this \" integrity check \"? You may recall how we imported the Bootstrap CSS file. 1 < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity = \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin = \"anonymous\" >","title":"Note on Content Delivery Networks (CDN)"},{"location":"intro-to-bootstrap/02-getting-started/#breaking-it-down","text":"","title":"Breaking it down"},{"location":"intro-to-bootstrap/02-getting-started/#web-resources","text":"We can see that the link has an attribute, href with the value, \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" . This href \"points\" to a web resource (a file) named bootstrap.min.css","title":"Web Resources"},{"location":"intro-to-bootstrap/02-getting-started/#web-page-loading","text":"A Content Delivery Network (CDN) is a central point where a client (such as a web browser) can request a web file. The CDN can automatically pick the geographically closest, available web server that has the file, in order to improve web page load times. Companies and web developers use CDNs all the time to host static content , files that are not expected to change. For example, say I am on the East Coast, Boston, Massachusetts, and using my laptop (the client ), I access my friend's photo sharing website, which he hosts entirely on a computer (the host ) in his home on the West Coast, San Francisco, California. The speed at which my friend can transfer these photos to my computer is not only limited by the network speed of my friend's home-internet, but also the distance between the client and the host. Specifically, the speed of data transfer between a client, and host is limited by the speed of light (3 * 10^8 m/s in a vacuum). For example, the distance between New York and Paris (in a straight line) is about 5,800 kilometers. In order for light to travel that distance and back, it would take 40 milliseconds . We consider this to be a theoretical minimum ping between two locations. Real-world pings are slower due to many reasons such as the real-distance of the fiber optic cables, the speed of light in the cable material, delays in routing services, etc.","title":"Web page loading"},{"location":"intro-to-bootstrap/02-getting-started/#resources","text":"Bootstrap Offical Documentation Getting Started W3 Schools Bootstrap 4 Tutorial","title":"Resources"},{"location":"intro-to-bootstrap/03-containers/","text":"// todo Containers \u00b6 Containers are a common building block in Bootstrap, and are used with the .container class. Resources \u00b6 W3 Schools Bootstrap 4 Containers","title":"Containers"},{"location":"intro-to-bootstrap/03-containers/#containers","text":"Containers are a common building block in Bootstrap, and are used with the .container class.","title":"Containers"},{"location":"intro-to-bootstrap/03-containers/#resources","text":"W3 Schools Bootstrap 4 Containers","title":"Resources"},{"location":"intro-to-bootstrap/04-intro-to-grids/","text":"// todo","title":"Grids"},{"location":"intro-to-bootstrap/05-typography/","text":"// todo","title":"Typography"},{"location":"intro-to-bootstrap/06-buttons/","text":"// todo","title":"Buttons"},{"location":"intro-to-bootstrap/07-forms/","text":"// todo","title":"Forms"},{"location":"intro-to-bootstrap/08-modals/","text":"// todo","title":"Modals"},{"location":"intro-to-html/01-intro/","text":"Introduction to HTML \u00b6 This course is about the web's hypertext markup language - HTML. There have been many other markup languages before the web, but HTML was one of the first popular markup languages one to allow pages from one computer the ability to link to pages on any another computer it the world. HTML became the foundation of the world wide web. Here are the topics we will cover in this course: Elements and attributes - How we create HTML pages using data formats called elements and attributes. HTML file structure - How the highest level elements in a web page work together. HTML headings - How we create headings in a web page such as Chapter or Section headings and titles. Bold and italic (as well as superscript and subscripts) - how we make inline text have a different formatting style Lists - How we create unordered bullet lists and ordered numbered lists Images - How we add images into a web page Links - How we add hypertext links to a web page Tables - How we add tables to change the layout of columns of text or data tables Forms - How we create forms that have a variety of input fields such as test and selection lists","title":"Introduction"},{"location":"intro-to-html/01-intro/#introduction-to-html","text":"This course is about the web's hypertext markup language - HTML. There have been many other markup languages before the web, but HTML was one of the first popular markup languages one to allow pages from one computer the ability to link to pages on any another computer it the world. HTML became the foundation of the world wide web. Here are the topics we will cover in this course: Elements and attributes - How we create HTML pages using data formats called elements and attributes. HTML file structure - How the highest level elements in a web page work together. HTML headings - How we create headings in a web page such as Chapter or Section headings and titles. Bold and italic (as well as superscript and subscripts) - how we make inline text have a different formatting style Lists - How we create unordered bullet lists and ordered numbered lists Images - How we add images into a web page Links - How we add hypertext links to a web page Tables - How we add tables to change the layout of columns of text or data tables Forms - How we create forms that have a variety of input fields such as test and selection lists","title":"Introduction to HTML"},{"location":"intro-to-html/01a-elements-and-attributes/","text":"Elements and Attributes \u00b6 HTML is composed of a tree-structure of things called \"elements\". Just like a tree, HTML files have a single root (think of a trunk), many branch elements that contain other elements, and finally leaves of the tree that contain the text that we display on a page. Elements are usually composed of pairs of tags - begin tags and end tags. Here are the main parts of an element: The begin tag is the start of the element. It always starts with a \"less then\" character and ends with a \"greater than\" character. The begin tag can have many attributes which are name-value pairs The name-value pairs are composed of attribute names, followed by an equal sign, followed by the attribute values surrounded by double quotes The begin and end tags surround the element text. This is usually the leaf element or other branch elements The element text is followed by an end tag. Note that the end tag has the same characters as a begin tag but it also has a forward slash after the less-than character. What is difficult to understand is that elements can contain other elements which in turn can contain other elements. Here is an example of this tree structure: 1 2 3 4 5 6 7 <root> <branch> <branch> <branch> This is the leaf text. </branch> </branch> </branch> <root> It is also interesting to note that it does not matter where you put newlines (carriage returns) between the branch elements. HTML will render the same within the browser. The following is the same as the markup above: 1 2 3 <root><branch><branch> <branch> This is the leaf text. </branch> </branch></branch><root> If you are new to markup languages, this terminology of \"elements\" and \"attributes\" and the rules will seem a bit odd at first. However, as you begin to use it you will learn to appreciate how allowing us to be flexible with the way spaces are used when we create the HTML files to be convenient. It allows us to use consistent rules for how to display the test on a web page. Empty Elements \u00b6 There are some places in an HTML file where the contents of the element is empty. For these elements there is no end element and you add a forward slash before the greater then. Examples of empty elements: 1 2 3 < br /> <!-- newline break --> < img src = \"myimage.jpg\" /> <!-- image with no text value --> < input type = \"text\" id = \"firstName\" name = \"firstName\" /> <!-- input field -->","title":"Elements and Attributes"},{"location":"intro-to-html/01a-elements-and-attributes/#elements-and-attributes","text":"HTML is composed of a tree-structure of things called \"elements\". Just like a tree, HTML files have a single root (think of a trunk), many branch elements that contain other elements, and finally leaves of the tree that contain the text that we display on a page. Elements are usually composed of pairs of tags - begin tags and end tags. Here are the main parts of an element: The begin tag is the start of the element. It always starts with a \"less then\" character and ends with a \"greater than\" character. The begin tag can have many attributes which are name-value pairs The name-value pairs are composed of attribute names, followed by an equal sign, followed by the attribute values surrounded by double quotes The begin and end tags surround the element text. This is usually the leaf element or other branch elements The element text is followed by an end tag. Note that the end tag has the same characters as a begin tag but it also has a forward slash after the less-than character. What is difficult to understand is that elements can contain other elements which in turn can contain other elements. Here is an example of this tree structure: 1 2 3 4 5 6 7 <root> <branch> <branch> <branch> This is the leaf text. </branch> </branch> </branch> <root> It is also interesting to note that it does not matter where you put newlines (carriage returns) between the branch elements. HTML will render the same within the browser. The following is the same as the markup above: 1 2 3 <root><branch><branch> <branch> This is the leaf text. </branch> </branch></branch><root> If you are new to markup languages, this terminology of \"elements\" and \"attributes\" and the rules will seem a bit odd at first. However, as you begin to use it you will learn to appreciate how allowing us to be flexible with the way spaces are used when we create the HTML files to be convenient. It allows us to use consistent rules for how to display the test on a web page.","title":"Elements and Attributes"},{"location":"intro-to-html/01a-elements-and-attributes/#empty-elements","text":"There are some places in an HTML file where the contents of the element is empty. For these elements there is no end element and you add a forward slash before the greater then. Examples of empty elements: 1 2 3 < br /> <!-- newline break --> < img src = \"myimage.jpg\" /> <!-- image with no text value --> < input type = \"text\" id = \"firstName\" name = \"firstName\" /> <!-- input field -->","title":"Empty Elements"},{"location":"intro-to-html/02-html-structure/","text":"HTML File Structure \u00b6 HTML files all have a consistent structure of elements and attributes. In this lab we will take a look at this structure and see how the elements work together to describe the way a web page is laid out and rendered. Getting Started Template \u00b6 Here is a standard template we will be using for our example programs. 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> < title > A simple HTML document </ title > </ head > < body > < p > Hello World! < p > </ body > </ html > DOCTYPE \u00b6 There are many varieties and versions of HTML files. This line indicates that this file conforms to the most common modern format: HTML 5. html \u00b6 This is the root element. The begin tag should be the second line of the file and the end tag the last line of the file. The html element contains two parts. The first is the head that hold the title and data about the content and the body has the page content itself. The lang=\"en\" tells web crawlers that the language of this web page is English. head \u00b6 The head element contains information about the page content. This includes the page title that appears on the browser tab. It is a good best practice to pick a short but descriptive page title. The <meta charset=\"utf-8\"/> element indicates that the encoding character set is UTF-8. This is the preferred format for encoding web pages. body \u00b6 The body element contains the page content itself. The elements within the body elements hold the structure of the web page and the text that is rendered within each element. Block and Inline Elements \u00b6 The body element contains two types of elements: Block elements always starts on a new line and takes up the full width available. Block elements stretch out to the left and right as far as the layout permits. Block elements are used to arrange large regions of page layout. Inline elements do not start on a new line and it only take up as much width as necessary. They are frequently used to change the way individual words are displayed within text blocks. For example you can use an inline element to change the font or color of a few words within a line of text. One of the tricky things about learning HTML layout is to understand the rules of how block and inline elements work together.","title":"HTML File Structure"},{"location":"intro-to-html/02-html-structure/#html-file-structure","text":"HTML files all have a consistent structure of elements and attributes. In this lab we will take a look at this structure and see how the elements work together to describe the way a web page is laid out and rendered.","title":"HTML File Structure"},{"location":"intro-to-html/02-html-structure/#getting-started-template","text":"Here is a standard template we will be using for our example programs. 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> < title > A simple HTML document </ title > </ head > < body > < p > Hello World! < p > </ body > </ html >","title":"Getting Started Template"},{"location":"intro-to-html/02-html-structure/#doctype","text":"There are many varieties and versions of HTML files. This line indicates that this file conforms to the most common modern format: HTML 5.","title":"DOCTYPE"},{"location":"intro-to-html/02-html-structure/#html","text":"This is the root element. The begin tag should be the second line of the file and the end tag the last line of the file. The html element contains two parts. The first is the head that hold the title and data about the content and the body has the page content itself. The lang=\"en\" tells web crawlers that the language of this web page is English.","title":"html"},{"location":"intro-to-html/02-html-structure/#head","text":"The head element contains information about the page content. This includes the page title that appears on the browser tab. It is a good best practice to pick a short but descriptive page title. The <meta charset=\"utf-8\"/> element indicates that the encoding character set is UTF-8. This is the preferred format for encoding web pages.","title":"head"},{"location":"intro-to-html/02-html-structure/#body","text":"The body element contains the page content itself. The elements within the body elements hold the structure of the web page and the text that is rendered within each element.","title":"body"},{"location":"intro-to-html/02-html-structure/#block-and-inline-elements","text":"The body element contains two types of elements: Block elements always starts on a new line and takes up the full width available. Block elements stretch out to the left and right as far as the layout permits. Block elements are used to arrange large regions of page layout. Inline elements do not start on a new line and it only take up as much width as necessary. They are frequently used to change the way individual words are displayed within text blocks. For example you can use an inline element to change the font or color of a few words within a line of text. One of the tricky things about learning HTML layout is to understand the rules of how block and inline elements work together.","title":"Block and Inline Elements"},{"location":"intro-to-html/03-headings/","text":"HTML Headings \u00b6 HTML headings appear in the body element. They have different levels and get smaller in font as you increase the heading level. Sometimes the first level heading <h1> is use as the title of the document. If you have a large document then <h2> might be the chapter headings and <h3/> might be the chapter sections. 1 2 3 4 5 < h1 > Article Title </ h1 > < h2 > Chapter Heading </ h2 > < h3 > Chapter Section </ h3 > < h4 > Chapter Subsection </ h4 > < h5 > Chapter Sub-Subsection </ h5 > Here is how these would render: Article Title Chapter Heading Chapter Section Chapter Subsection Chapter Sub-Subsection Note that by default, headings always appear on their own line. However, you can use CSS to change the font size, font color, spacing around the headers and add border and color to the background of a header.","title":"Headings"},{"location":"intro-to-html/03-headings/#html-headings","text":"HTML headings appear in the body element. They have different levels and get smaller in font as you increase the heading level. Sometimes the first level heading <h1> is use as the title of the document. If you have a large document then <h2> might be the chapter headings and <h3/> might be the chapter sections. 1 2 3 4 5 < h1 > Article Title </ h1 > < h2 > Chapter Heading </ h2 > < h3 > Chapter Section </ h3 > < h4 > Chapter Subsection </ h4 > < h5 > Chapter Sub-Subsection </ h5 > Here is how these would render:","title":"HTML Headings"},{"location":"intro-to-html/04-bold-and-italic/","text":"Adding Bold and Italic to HTML \u00b6 HTML allows us to add bold and italic to any text in a document. To do this we need to wrap the text in <b> elements for bold and <i> elements for italics. Here is an example of adding bold and italic to a paragraph of text. 1 2 3 4 < p > HTML allows us to add < b > bold </ b > to any text that we want to < b > emphasize. </ b > . We can also add < i > italic </ i > text or a combination of both < b >< i > bold and italic </ i ></ b > . </ p > Which will render like this: HTML allows us to add bold to any text that we want to emphasize. . We can also add italic text or a combination of both bold and italic elements turned on. Warning You must remember to close the bold and italic markup. They don't just apply to a single world. Make sure you close the elements in the reverse order that you added them. Other Inline Elements \u00b6 There are two other interesting inline elements that you might want to use. One is for creating superscripts and one is for subscripts. Superscripts \u00b6 To make text appear shifted up we use the <sub> tag. Here we use it in a mathematical formula to show an exponent: 1 < p > y = x < sup > 2 </ sup > + 2x + 1 < p > which will render: y = x 2 + 2x + 1 You can also use some greek letters if you know how to encode them. Here the greek letter \"pi\" is references using &pi; 1 2 3 4 < p > The formula: < br /> e < sup > i &pi; </ sup > = -1 < br /> is one of the most elegant formulas in mathematics </ p > The formula: e i\u03c0 = -1 is one of the most elegant formulas in mathematics Subscripts \u00b6 1 2 3 < p > The chemical formula for water is H < sub > 2 </ sub > O </ p > The chemical formula for water is H 2 O 1 2 3 < p > The chemical formula for caffeine is C < sub > 8 </ sub > H < sub > 10 </ sub > N < sub > 4 </ sub > O < sub > 2 </ sub > </ p > The chemical formula for caffeine is C 8 H 10 N 4 O 2","title":"Bold and Italic"},{"location":"intro-to-html/04-bold-and-italic/#adding-bold-and-italic-to-html","text":"HTML allows us to add bold and italic to any text in a document. To do this we need to wrap the text in <b> elements for bold and <i> elements for italics. Here is an example of adding bold and italic to a paragraph of text. 1 2 3 4 < p > HTML allows us to add < b > bold </ b > to any text that we want to < b > emphasize. </ b > . We can also add < i > italic </ i > text or a combination of both < b >< i > bold and italic </ i ></ b > . </ p > Which will render like this: HTML allows us to add bold to any text that we want to emphasize. . We can also add italic text or a combination of both bold and italic elements turned on. Warning You must remember to close the bold and italic markup. They don't just apply to a single world. Make sure you close the elements in the reverse order that you added them.","title":"Adding Bold and Italic to HTML"},{"location":"intro-to-html/04-bold-and-italic/#other-inline-elements","text":"There are two other interesting inline elements that you might want to use. One is for creating superscripts and one is for subscripts.","title":"Other Inline Elements"},{"location":"intro-to-html/04-bold-and-italic/#superscripts","text":"To make text appear shifted up we use the <sub> tag. Here we use it in a mathematical formula to show an exponent: 1 < p > y = x < sup > 2 </ sup > + 2x + 1 < p > which will render: y = x 2 + 2x + 1 You can also use some greek letters if you know how to encode them. Here the greek letter \"pi\" is references using &pi; 1 2 3 4 < p > The formula: < br /> e < sup > i &pi; </ sup > = -1 < br /> is one of the most elegant formulas in mathematics </ p > The formula: e i\u03c0 = -1 is one of the most elegant formulas in mathematics","title":"Superscripts"},{"location":"intro-to-html/04-bold-and-italic/#subscripts","text":"1 2 3 < p > The chemical formula for water is H < sub > 2 </ sub > O </ p > The chemical formula for water is H 2 O 1 2 3 < p > The chemical formula for caffeine is C < sub > 8 </ sub > H < sub > 10 </ sub > N < sub > 4 </ sub > O < sub > 2 </ sub > </ p > The chemical formula for caffeine is C 8 H 10 N 4 O 2","title":"Subscripts"},{"location":"intro-to-html/05-lists/","text":"HTML Lists \u00b6 HTML has several types of lists: Unordered lists Ordered Lists Definition Lists Unordered Lists \u00b6 This is just a simple list with markers called \"bullets\" at the front of every new list item. We used the <ul> tag to start an unordered list and we use the <li> tag to specify each list item. 1 2 3 4 5 < ul > < li > Apples </ li > < li > Bananas </ li > < li > Pears </ li > </ ul > Apples Bananas Pears Ordered lists \u00b6 Apples Bananas Pears ``` Apples Bananas Pears Definition lists \u00b6 These are lists that have a definition title ( <dt> ) at the front of each item. The item then has a definition description <dd> right after the title. Each item can have it's own distinct label. Definition lists are ideal for creating a dictionary list where the label is the term and the description is the definition of the word. Here is an example of a definition list. Engage Where we introduce our topic and any background motivation. Elicit Where we ask the students what their prior knowledge and how it might be related to the new topic. Explore Where students get a chance to interact with the elements and try out some sample code. Explain Where we explain what each component does. Elaborate Where we dive into the details of how the components interact. Extend Where we ask students to extend the example code. Evaluate Where we check if the students comprehend the lesson","title":"Lists"},{"location":"intro-to-html/05-lists/#html-lists","text":"HTML has several types of lists: Unordered lists Ordered Lists Definition Lists","title":"HTML Lists"},{"location":"intro-to-html/05-lists/#unordered-lists","text":"This is just a simple list with markers called \"bullets\" at the front of every new list item. We used the <ul> tag to start an unordered list and we use the <li> tag to specify each list item. 1 2 3 4 5 < ul > < li > Apples </ li > < li > Bananas </ li > < li > Pears </ li > </ ul > Apples Bananas Pears","title":"Unordered Lists"},{"location":"intro-to-html/05-lists/#ordered-lists","text":"Apples Bananas Pears ``` Apples Bananas Pears","title":"Ordered lists"},{"location":"intro-to-html/05-lists/#definition-lists","text":"These are lists that have a definition title ( <dt> ) at the front of each item. The item then has a definition description <dd> right after the title. Each item can have it's own distinct label. Definition lists are ideal for creating a dictionary list where the label is the term and the description is the definition of the word. Here is an example of a definition list. Engage Where we introduce our topic and any background motivation. Elicit Where we ask the students what their prior knowledge and how it might be related to the new topic. Explore Where students get a chance to interact with the elements and try out some sample code. Explain Where we explain what each component does. Elaborate Where we dive into the details of how the components interact. Extend Where we ask students to extend the example code. Evaluate Where we check if the students comprehend the lesson","title":"Definition lists"},{"location":"intro-to-html/06-images/","text":"HTML Images \u00b6 We use the <img> element to place images into a web page. The src attribute must have a path to the image on your web server. The src element is the only required element, but it is a best practice to also include an alternate description of the image for people with vision disabilities can use also use the web page. 1 < img src = \"img/earth.jpg\" alt = \"Photo of earth from space\" /> Changing the Image Size \u00b6 You can also add a width and a height to control the horizontal (x) and the vertical (y) dimensions of an image. In this example, we will shrink the image down to 50X50 pixels: 1 < img src = \"img/earth.jpg\" alt = \"Photo of earth from space\" width = \"100\" height = \"100\" /> Relative vs Absolute Paths \u00b6 There are two ways to reference an image. Both methods have pros and cons. If you are deploying a single web site that you want consistent behavior, it is best to include all the images in your own web site and then use a relative path to the images. If you want to share images between multiple areas of the web site they should be place in a common folder, typically named the img folder. Relative paths start with that folder name. The alternative is to directly reference images on the web using a full URL that starts with http:// . This has the advantage of being portable as long as that the path to the image does not change. However, you sometimes can't guarantee that a remote web site will not move images around or change their file names. So to be fully in control of your image references, use a relative path. Best Practice for Fast Web Page Loading \u00b6 You also want to be aware of the size of your images. For most web pages, a size of around 10K for small images is fine. Most cameras today store images in large files of several megabytes. Make sure you use a tool to reduce the size of these images before you add them to your web page.","title":"Images"},{"location":"intro-to-html/06-images/#html-images","text":"We use the <img> element to place images into a web page. The src attribute must have a path to the image on your web server. The src element is the only required element, but it is a best practice to also include an alternate description of the image for people with vision disabilities can use also use the web page. 1 < img src = \"img/earth.jpg\" alt = \"Photo of earth from space\" />","title":"HTML Images"},{"location":"intro-to-html/06-images/#changing-the-image-size","text":"You can also add a width and a height to control the horizontal (x) and the vertical (y) dimensions of an image. In this example, we will shrink the image down to 50X50 pixels: 1 < img src = \"img/earth.jpg\" alt = \"Photo of earth from space\" width = \"100\" height = \"100\" />","title":"Changing the Image Size"},{"location":"intro-to-html/06-images/#relative-vs-absolute-paths","text":"There are two ways to reference an image. Both methods have pros and cons. If you are deploying a single web site that you want consistent behavior, it is best to include all the images in your own web site and then use a relative path to the images. If you want to share images between multiple areas of the web site they should be place in a common folder, typically named the img folder. Relative paths start with that folder name. The alternative is to directly reference images on the web using a full URL that starts with http:// . This has the advantage of being portable as long as that the path to the image does not change. However, you sometimes can't guarantee that a remote web site will not move images around or change their file names. So to be fully in control of your image references, use a relative path.","title":"Relative vs Absolute Paths"},{"location":"intro-to-html/06-images/#best-practice-for-fast-web-page-loading","text":"You also want to be aware of the size of your images. For most web pages, a size of around 10K for small images is fine. Most cameras today store images in large files of several megabytes. Make sure you use a tool to reduce the size of these images before you add them to your web page.","title":"Best Practice for Fast Web Page Loading"},{"location":"intro-to-html/07-links/","text":"HTML Links \u00b6 HTML links are created using the HTML anchor element <a/> . The anchor has an attribute with the name of href that is used to hold the URL of the page to go to when the link is clicked. Here is an example: 1 < a href = \"http://example.com/mypage.html\" > Link to mypage </ a > You can use the HTML anchor tag to make many elements clickable, not just text. So you can put images and buttons inside the content of the anchor element. Linking to Images \u00b6 The anchor tag allows you to got to another web page if you click on a image. Here is the format of using a clickable image: 1 2 3 < a href = \"https://www.coderdojotc.org/web-ux/intro-to-html/img/earth.jpg\" > < img src = \"https://www.coderdojotc.org/web-ux/intro-to-html/img/earth.jpg\" alt = \"Photo of earth from space\" width = \"100\" height = \"100\" /> </ a > Try clicking on this image:","title":"Links"},{"location":"intro-to-html/07-links/#html-links","text":"HTML links are created using the HTML anchor element <a/> . The anchor has an attribute with the name of href that is used to hold the URL of the page to go to when the link is clicked. Here is an example: 1 < a href = \"http://example.com/mypage.html\" > Link to mypage </ a > You can use the HTML anchor tag to make many elements clickable, not just text. So you can put images and buttons inside the content of the anchor element.","title":"HTML Links"},{"location":"intro-to-html/07-links/#linking-to-images","text":"The anchor tag allows you to got to another web page if you click on a image. Here is the format of using a clickable image: 1 2 3 < a href = \"https://www.coderdojotc.org/web-ux/intro-to-html/img/earth.jpg\" > < img src = \"https://www.coderdojotc.org/web-ux/intro-to-html/img/earth.jpg\" alt = \"Photo of earth from space\" width = \"100\" height = \"100\" /> </ a > Try clicking on this image:","title":"Linking to Images"},{"location":"intro-to-html/08-tables/","text":"HTML Tables \u00b6 Tables allow us to place content in regular rows and columns within a region of a page. Tables can be used to place text into two columns to make it easier to read, but they can also be used to create complex displays of reports that include header descriptions and footer totals. We will start with a simple description of a table and then build a more detailed example. Creating a Simple Table: Two Column Layout \u00b6 Here is a simple example of using a table to place text into two vertical columns. We will use both a <tr> element for a table row and a <td> element for the table data. 1 2 3 4 5 6 < table > < tr > < td > This text will be placed into the left column 1 </ td > < td > This text will be placed into the right column 2 </ td > </ td > </ table > Here is how this table will render on a web page: This text will be placed into the left column 1 This text will be placed into the right column 2 A Table with Header and Footer elements \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <table> <thead> <tr> <th> Month </th> <th> Mentors </th> <th> Students </th> </tr> </thead> <tbody> <tr> <td> January </td> <td> 4 </td> <td> 12 </td> </tr> <tr> <td> February </td> <td> 5 </td> <td> 15 </td> </tr> </tbody> <tfoot> <tr> <td> March </td> <td> 6 </td> <td> 24 </td> </tr> </tfoot> </table> Month Mentors Students January 4 12 February 5 15 March 6 24","title":"Tables"},{"location":"intro-to-html/08-tables/#html-tables","text":"Tables allow us to place content in regular rows and columns within a region of a page. Tables can be used to place text into two columns to make it easier to read, but they can also be used to create complex displays of reports that include header descriptions and footer totals. We will start with a simple description of a table and then build a more detailed example.","title":"HTML Tables"},{"location":"intro-to-html/08-tables/#creating-a-simple-table-two-column-layout","text":"Here is a simple example of using a table to place text into two vertical columns. We will use both a <tr> element for a table row and a <td> element for the table data. 1 2 3 4 5 6 < table > < tr > < td > This text will be placed into the left column 1 </ td > < td > This text will be placed into the right column 2 </ td > </ td > </ table > Here is how this table will render on a web page: This text will be placed into the left column 1 This text will be placed into the right column 2","title":"Creating a Simple Table: Two Column Layout"},{"location":"intro-to-html/08-tables/#a-table-with-header-and-footer-elements","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <table> <thead> <tr> <th> Month </th> <th> Mentors </th> <th> Students </th> </tr> </thead> <tbody> <tr> <td> January </td> <td> 4 </td> <td> 12 </td> </tr> <tr> <td> February </td> <td> 5 </td> <td> 15 </td> </tr> </tbody> <tfoot> <tr> <td> March </td> <td> 6 </td> <td> 24 </td> </tr> </tfoot> </table> Month Mentors Students January 4 12 February 5 15 March 6 24","title":"A Table with Header and Footer elements"},{"location":"intro-to-html/09-forms/","text":"HTML Forms \u00b6 In this lab we will learn to create HTML forms that allow us to gather different types of input from users and send the users information to a file or a database. Form Structure \u00b6 Form all have the following structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 < form action = \"/http-put-service\" > < label > < input > < label > < input > < label > < input > < input type = \"submit\" value = \"Submit\" > </ form > The action attribute is the place where the form data is sent. Usually HTML forms send their data via an HTTP POST function. The submit input just before the form close tag is the button that the user presses. All the rest of the form consists of labels and inputs in pairs. Sometimes the labels and input pairs are on the same line, and sometimes they are each on their own line. In some inputs such as checkboxes and radio button the label occurs before the input. You can use CSS to determine how your form is styled. Here are the different types of input fields: Input fields - a single line of input Selection lists - where a user must select from one or more item of a fixed list Text Areas - larger blocks of multi-line text input area Checkboxes - check boxes where a user can check many items in a list Radio Buttons - a variation of selection lists were all values are visible Input Fields \u00b6 1 2 3 4 5 < label for = \"fname\" > First name: </ label > < input type = \"text\" id = \"firstName\" name = \"firstName\" /> < label for = \"fname\" > Last name: </ label > < input type = \"text\" id = \"firstName\" name = \"firstName\" /> < input type = \"submit\" value = \"Submit\" > First name: Last name: Selection List \u00b6 1 2 3 4 5 6 7 < label for = \"language\" > Select your language: </ label > < select name = \"language\" id = \"language\" > < option value = \"python\" > Python </ option > < option value = \"c\" > C </ option > < option value = \"java\" > Java </ option > < option value = \"kotlin\" > Kotlin </ option > </ select > Select your language: Python C Java Kotlin Textarea \u00b6 1 2 3 4 < label for = \"notes\" > Enter your notes here </ label >< br /> < textarea id = \"notes\" name = \"notes\" rows = \"4\" cols = \"50\" > Enter your notes here. </ textarea > Enter your notes here Enter your notes here. Checkboxes \u00b6 We use checkboxes when we have a list of items and each item can have a true or a false value. 1 2 3 4 5 6 7 8 9 10 < p > What programming languages do you know? </ p > < label for = \"python\" > Python </ label > < input type = \"checkbox\" id = \"python\" name = \"python\" />< br /> < label for = \"c\" > C </ label > < input type = \"checkbox\" id = \"c\" name = \"c\" />< br /> < label for = \"java\" > Java </ label > < input type = \"checkbox\" id = \"java\" name = \"java\" />< br /> What programming languages do you know? (check all that apply) Python C Java Radio Buttons \u00b6 Radio buttons are very similar to the selection list in that only one item is selected at a time. 1 2 3 4 5 6 7 8 9 10 11 12 13 < p > What is your favorite language? (select only one item) </ p > < input type = \"radio\" id = \"python\" name = \"python\" /> < label for = \"python\" > Python </ label > < br /> < input type = \"radio\" id = \"c\" name = \"c\" /> < label for = \"c\" > C </ label > < br /> < input type = \"radio\" id = \"java\" name = \"java\" /> < label for = \"java\" > Java </ label > < br /> What is your favorite language? (select only one item) Python C Java","title":"Forms"},{"location":"intro-to-html/09-forms/#html-forms","text":"In this lab we will learn to create HTML forms that allow us to gather different types of input from users and send the users information to a file or a database.","title":"HTML Forms"},{"location":"intro-to-html/09-forms/#form-structure","text":"Form all have the following structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 < form action = \"/http-put-service\" > < label > < input > < label > < input > < label > < input > < input type = \"submit\" value = \"Submit\" > </ form > The action attribute is the place where the form data is sent. Usually HTML forms send their data via an HTTP POST function. The submit input just before the form close tag is the button that the user presses. All the rest of the form consists of labels and inputs in pairs. Sometimes the labels and input pairs are on the same line, and sometimes they are each on their own line. In some inputs such as checkboxes and radio button the label occurs before the input. You can use CSS to determine how your form is styled. Here are the different types of input fields: Input fields - a single line of input Selection lists - where a user must select from one or more item of a fixed list Text Areas - larger blocks of multi-line text input area Checkboxes - check boxes where a user can check many items in a list Radio Buttons - a variation of selection lists were all values are visible","title":"Form Structure"},{"location":"intro-to-html/09-forms/#input-fields","text":"1 2 3 4 5 < label for = \"fname\" > First name: </ label > < input type = \"text\" id = \"firstName\" name = \"firstName\" /> < label for = \"fname\" > Last name: </ label > < input type = \"text\" id = \"firstName\" name = \"firstName\" /> < input type = \"submit\" value = \"Submit\" > First name: Last name:","title":"Input Fields"},{"location":"intro-to-html/09-forms/#selection-list","text":"1 2 3 4 5 6 7 < label for = \"language\" > Select your language: </ label > < select name = \"language\" id = \"language\" > < option value = \"python\" > Python </ option > < option value = \"c\" > C </ option > < option value = \"java\" > Java </ option > < option value = \"kotlin\" > Kotlin </ option > </ select > Select your language: Python C Java Kotlin","title":"Selection List"},{"location":"intro-to-html/09-forms/#textarea","text":"1 2 3 4 < label for = \"notes\" > Enter your notes here </ label >< br /> < textarea id = \"notes\" name = \"notes\" rows = \"4\" cols = \"50\" > Enter your notes here. </ textarea > Enter your notes here Enter your notes here.","title":"Textarea"},{"location":"intro-to-html/09-forms/#checkboxes","text":"We use checkboxes when we have a list of items and each item can have a true or a false value. 1 2 3 4 5 6 7 8 9 10 < p > What programming languages do you know? </ p > < label for = \"python\" > Python </ label > < input type = \"checkbox\" id = \"python\" name = \"python\" />< br /> < label for = \"c\" > C </ label > < input type = \"checkbox\" id = \"c\" name = \"c\" />< br /> < label for = \"java\" > Java </ label > < input type = \"checkbox\" id = \"java\" name = \"java\" />< br /> What programming languages do you know? (check all that apply) Python C Java","title":"Checkboxes"},{"location":"intro-to-html/09-forms/#radio-buttons","text":"Radio buttons are very similar to the selection list in that only one item is selected at a time. 1 2 3 4 5 6 7 8 9 10 11 12 13 < p > What is your favorite language? (select only one item) </ p > < input type = \"radio\" id = \"python\" name = \"python\" /> < label for = \"python\" > Python </ label > < br /> < input type = \"radio\" id = \"c\" name = \"c\" /> < label for = \"c\" > C </ label > < br /> < input type = \"radio\" id = \"java\" name = \"java\" /> < label for = \"java\" > Java </ label > < br /> What is your favorite language? (select only one item) Python C Java","title":"Radio Buttons"},{"location":"intro-to-html/appendix-01-markup-languages/","text":"Markup languages \u00b6 A markup language is used to encode details of a document, where the markup language is not displayed in the final result. Daily Examples of Markup languages \u00b6 If you have ever changed a font size, or made a font bold, you have used a markup langauge . When writing on paper, writing a \"carrot\" ( ^ ) character to insert words, underlining a title, crossing out an error Footnotes in a book Microsoft word Headings (Header 1 , Header 2, Header 3), headers, footers, margins Common Markup language features \u00b6 Fonts Font family Font size, color Bold , underline , italic Code formatting Tables Lists Buttons Forms Hyperlinks Markup Examples \u00b6 Markup languages commonly saved as a text file. Below we see an example of both inline and block statements. Example 1 - HTML \u00b6 1 2 3 4 5 < h1 > Anatidae </ h1 > < p > The family < i > Anatidae </ i > includes ducks, geese, and swans, but < em > not </ em > the closely related screamers. </ p > HTML Example 2 - Markdown \u00b6 Plain text \u00b6 1 2 3 4 5 6 7 8 * Markdown * is also a ** markup language ** that converts to HTML | --------|-----| | name | Age | | --------|-----| | Alice | 18 | | Bob | 19 | | Sue | 20 | Result \u00b6 Markdown is also a markup language that is converted to HTML |--------|-----| | name | Age | |--------|-----| | Alice | 18 | | Bob | 19 | | Sue | 20 |","title":"Markup languages"},{"location":"intro-to-html/appendix-01-markup-languages/#markup-languages","text":"A markup language is used to encode details of a document, where the markup language is not displayed in the final result.","title":"Markup languages"},{"location":"intro-to-html/appendix-01-markup-languages/#daily-examples-of-markup-languages","text":"If you have ever changed a font size, or made a font bold, you have used a markup langauge . When writing on paper, writing a \"carrot\" ( ^ ) character to insert words, underlining a title, crossing out an error Footnotes in a book Microsoft word Headings (Header 1 , Header 2, Header 3), headers, footers, margins","title":"Daily Examples of Markup languages"},{"location":"intro-to-html/appendix-01-markup-languages/#common-markup-language-features","text":"Fonts Font family Font size, color Bold , underline , italic Code formatting Tables Lists Buttons Forms Hyperlinks","title":"Common Markup language features"},{"location":"intro-to-html/appendix-01-markup-languages/#markup-examples","text":"Markup languages commonly saved as a text file. Below we see an example of both inline and block statements.","title":"Markup Examples"},{"location":"intro-to-html/appendix-01-markup-languages/#example-1-html","text":"1 2 3 4 5 < h1 > Anatidae </ h1 > < p > The family < i > Anatidae </ i > includes ducks, geese, and swans, but < em > not </ em > the closely related screamers. </ p >","title":"Example 1 - HTML"},{"location":"intro-to-html/appendix-01-markup-languages/#html-example-2-markdown","text":"","title":"HTML Example 2 - Markdown"},{"location":"intro-to-html/appendix-01-markup-languages/#plain-text","text":"1 2 3 4 5 6 7 8 * Markdown * is also a ** markup language ** that converts to HTML | --------|-----| | name | Age | | --------|-----| | Alice | 18 | | Bob | 19 | | Sue | 20 |","title":"Plain text"},{"location":"intro-to-html/appendix-01-markup-languages/#result","text":"Markdown is also a markup language that is converted to HTML |--------|-----| | name | Age | |--------|-----| | Alice | 18 | | Bob | 19 | | Sue | 20 |","title":"Result"},{"location":"intro-to-html/appendix-02-html-review/","text":"HTML Review and Self-Study \u00b6 Here are some good resources for a beginner to HTML to absorb, and reference. Review \u00b6 HTML Images Mozilla (MDN) Web Docs - Another good site for web development references and tutorial HTML Text Formatting Reading \u00b6 HTML Character Sets - This is why we see <meta charset=\u201cUTF-8\u201d> in an HTML document. HTML IFrames IFrames are a common HTML element that hackers use to perform phishing attacks Introduction to CSS https://www.w3schools.com/html/html_css.asp https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_is_structured https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Fundamentals https://developer.mozilla.org/en-US/docs/Web/CSS/color Reference \u00b6 W3 schools - HTML Element Reference https://www.w3schools.com/tags/default.asp - Reference to all the HTML elements HTML 5 Syntax Guide https://www.w3schools.com/html/html5_syntax.asp W3School\u2019s HTML5 Guide covers the nitty-gritty of writing well-formatted HTML CSS Reference Guide https://developer.mozilla.org/en-US/docs/Web/CSS/Reference Explore \u00b6 Check out these examples and webpages \u00b6 Example of a CSS template Exercise 1 - Change a Color \u00b6 Step 0 \u00b6 Read this intro to html styles Step 1 - Changing text color \u00b6 Using the below editor, change the color of all the text to pink. Step 2 - Examples \u00b6 Now, create a Heading 1 element with the content The Atlas Book Store and then change the font for only this heading to a serif font. Not sure what a serif font is? Learn about css fonts Step 3 - Challenge \u00b6 If you haven\u2019t already, can you achieve step 1 and 2 in only one line? Hint: try using a style element Lab - Play a Youtube Video with HTML \u00b6 Objective: I want to create a webpage where I can showcase Youtube videos that I like. Step 0 - Getting Started \u00b6 Make an HTML document in a folder named \u201cMyFavoriteVideos\u201d named \u201cindex.html\u201d. Step 1 - Using a script element \u00b6 Observe what happens when you add the following to index.html 1 2 3 < script > console . log ( \"Hello world\" ); </ script > Step 2 - Demo \u00b6 Check out this demo on Iframe Step 3 - Going on your own \u00b6 Can you use your favorite search engine to figure out how to embed this Youtube video in your web page? Validation \u00b6 Your HTML document should pass the W3 HTML Checker without any errors.","title":"HTML Review and Self-Study"},{"location":"intro-to-html/appendix-02-html-review/#html-review-and-self-study","text":"Here are some good resources for a beginner to HTML to absorb, and reference.","title":"HTML Review and Self-Study"},{"location":"intro-to-html/appendix-02-html-review/#review","text":"HTML Images Mozilla (MDN) Web Docs - Another good site for web development references and tutorial HTML Text Formatting","title":"Review"},{"location":"intro-to-html/appendix-02-html-review/#reading","text":"HTML Character Sets - This is why we see <meta charset=\u201cUTF-8\u201d> in an HTML document. HTML IFrames IFrames are a common HTML element that hackers use to perform phishing attacks Introduction to CSS https://www.w3schools.com/html/html_css.asp https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_is_structured https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Fundamentals https://developer.mozilla.org/en-US/docs/Web/CSS/color","title":"Reading"},{"location":"intro-to-html/appendix-02-html-review/#reference","text":"W3 schools - HTML Element Reference https://www.w3schools.com/tags/default.asp - Reference to all the HTML elements HTML 5 Syntax Guide https://www.w3schools.com/html/html5_syntax.asp W3School\u2019s HTML5 Guide covers the nitty-gritty of writing well-formatted HTML CSS Reference Guide https://developer.mozilla.org/en-US/docs/Web/CSS/Reference","title":"Reference"},{"location":"intro-to-html/appendix-02-html-review/#explore","text":"","title":"Explore"},{"location":"intro-to-html/appendix-02-html-review/#check-out-these-examples-and-webpages","text":"Example of a CSS template","title":"Check out these examples and webpages"},{"location":"intro-to-html/appendix-02-html-review/#exercise-1-change-a-color","text":"","title":"Exercise 1 - Change a Color"},{"location":"intro-to-html/appendix-02-html-review/#step-0","text":"Read this intro to html styles","title":"Step 0"},{"location":"intro-to-html/appendix-02-html-review/#step-1-changing-text-color","text":"Using the below editor, change the color of all the text to pink.","title":"Step 1 - Changing text color"},{"location":"intro-to-html/appendix-02-html-review/#step-2-examples","text":"Now, create a Heading 1 element with the content The Atlas Book Store and then change the font for only this heading to a serif font. Not sure what a serif font is? Learn about css fonts","title":"Step 2 - Examples"},{"location":"intro-to-html/appendix-02-html-review/#step-3-challenge","text":"If you haven\u2019t already, can you achieve step 1 and 2 in only one line? Hint: try using a style element","title":"Step 3 - Challenge"},{"location":"intro-to-html/appendix-02-html-review/#lab-play-a-youtube-video-with-html","text":"Objective: I want to create a webpage where I can showcase Youtube videos that I like.","title":"Lab - Play a Youtube Video with HTML"},{"location":"intro-to-html/appendix-02-html-review/#step-0-getting-started","text":"Make an HTML document in a folder named \u201cMyFavoriteVideos\u201d named \u201cindex.html\u201d.","title":"Step 0 - Getting Started"},{"location":"intro-to-html/appendix-02-html-review/#step-1-using-a-script-element","text":"Observe what happens when you add the following to index.html 1 2 3 < script > console . log ( \"Hello world\" ); </ script >","title":"Step 1 - Using a script element"},{"location":"intro-to-html/appendix-02-html-review/#step-2-demo","text":"Check out this demo on Iframe","title":"Step 2 - Demo"},{"location":"intro-to-html/appendix-02-html-review/#step-3-going-on-your-own","text":"Can you use your favorite search engine to figure out how to embed this Youtube video in your web page?","title":"Step 3 - Going on your own"},{"location":"intro-to-html/appendix-02-html-review/#validation","text":"Your HTML document should pass the W3 HTML Checker without any errors.","title":"Validation"},{"location":"intro-to-javascript/01-introduction/","text":"Introduction \u00b6 JavaScript is a scripting or programming language that allows you to implement complex features on web pages \u2014 every time a web page does more than just sit there and display static information for you to look at \u2014 displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. \u2014 you can bet that JavaScript is probably involved. It is the third layer of the layer cake of standard web technologies, two of which (HTML and CSS) HTML is the markup language that we use to structure and give meaning to our web content, for example defining paragraphs, headings, and data tables, or embedding images and videos in the page. CSS is a language of style rules that we use to apply styling to our HTML content, for example setting background colors and fonts, and laying out our content in multiple columns. JavaScript is a scripting language that enables you to create dynamically updating content, control multimedia, animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.) The three layers build on top of one another nicely. Let's demonstrate this using a simple example. For the following code, and for code examples in the other Javascript lessons, create an account for the online web editor repl.it Using a simple text label as an example, We can mark it up using HTML to give it structure and purpose. Paste the following into the body of your index.html file on repl: 1 <p> Player 1: Chris </p> It should display as: Player 1: Chris Then we can add some CSS into the mix to get it looking nice, paste the following into style.css on repl.it 1 2 3 4 5 6 7 8 9 10 11 12 13 14 p { font-family : 'helvetica neue' , helvetica , sans-serif ; letter-spacing : 1 px ; text-transform : uppercase ; text-align : center ; border : 2 px solid rgba ( 0 , 0 , 200 , 0.6 ); background : rgba ( 0 , 0 , 200 , 0.3 ); color : rgba ( 0 , 0 , 200 , 0.6 ); box-shadow : 1 px 1 px 2 px rgba ( 0 , 0 , 200 , 0.4 ); border-radius : 10 px ; padding : 3 px 10 px ; display : inline-block ; cursor : pointer ; } And it should display as: And finally, we can add some JavaScript to implement dynamic behaviour, paste the following in scripts.js on repl.it 1 2 3 4 5 6 7 8 const para = document . querySelector ( 'p' ); para . addEventListener ( 'click' , updateName ); function updateName () { let name = prompt('Enter a new name') ; para.textContent = 'Player 1: ' + name ; } You should be able to click the text label now and see what happens. JavaScript can do a lot more than that \u2014 let's explore in the next lesson.","title":"Introduction"},{"location":"intro-to-javascript/01-introduction/#introduction","text":"JavaScript is a scripting or programming language that allows you to implement complex features on web pages \u2014 every time a web page does more than just sit there and display static information for you to look at \u2014 displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. \u2014 you can bet that JavaScript is probably involved. It is the third layer of the layer cake of standard web technologies, two of which (HTML and CSS) HTML is the markup language that we use to structure and give meaning to our web content, for example defining paragraphs, headings, and data tables, or embedding images and videos in the page. CSS is a language of style rules that we use to apply styling to our HTML content, for example setting background colors and fonts, and laying out our content in multiple columns. JavaScript is a scripting language that enables you to create dynamically updating content, control multimedia, animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.) The three layers build on top of one another nicely. Let's demonstrate this using a simple example. For the following code, and for code examples in the other Javascript lessons, create an account for the online web editor repl.it Using a simple text label as an example, We can mark it up using HTML to give it structure and purpose. Paste the following into the body of your index.html file on repl: 1 <p> Player 1: Chris </p> It should display as: Player 1: Chris Then we can add some CSS into the mix to get it looking nice, paste the following into style.css on repl.it 1 2 3 4 5 6 7 8 9 10 11 12 13 14 p { font-family : 'helvetica neue' , helvetica , sans-serif ; letter-spacing : 1 px ; text-transform : uppercase ; text-align : center ; border : 2 px solid rgba ( 0 , 0 , 200 , 0.6 ); background : rgba ( 0 , 0 , 200 , 0.3 ); color : rgba ( 0 , 0 , 200 , 0.6 ); box-shadow : 1 px 1 px 2 px rgba ( 0 , 0 , 200 , 0.4 ); border-radius : 10 px ; padding : 3 px 10 px ; display : inline-block ; cursor : pointer ; } And it should display as: And finally, we can add some JavaScript to implement dynamic behaviour, paste the following in scripts.js on repl.it 1 2 3 4 5 6 7 8 const para = document . querySelector ( 'p' ); para . addEventListener ( 'click' , updateName ); function updateName () { let name = prompt('Enter a new name') ; para.textContent = 'Player 1: ' + name ; } You should be able to click the text label now and see what happens. JavaScript can do a lot more than that \u2014 let's explore in the next lesson.","title":"Introduction"},{"location":"intro-to-javascript/02-variables/","text":"Variables \u00b6 Variables are containers for values (such as numbers, or strings of text). You create a variable with the keyword let (or var) followed by a name for your variable. 1 2 3 4 let name = 'Bob' ; console . log ( 'My name is ' + name ); name = 'Alice' ; console . log ( 'My name is ' + name ); Naming variables \u00b6 You can call a variable pretty much anything you like, but there are limitations. Generally, you should stick to just using Latin characters (0-9, a-z, A-Z) and the underscore character. You shouldn't use other characters because they may cause errors or be hard to understand for an international audience. Don't use underscores at the start of variable names \u2014 this is used in certain JavaScript constructs to mean specific things, so may get confusing. Don't use numbers at the start of variables. This isn't allowed and causes an error. A safe convention to stick to is so-called \"lower camel case\", where you stick together multiple words, using lower case for the whole first word and then capitalize subsequent words. We've been using this for our variable names in the article so far. Make variable names intuitive, so they describe the data they contain. Don't just use single letters/numbers, or big long phrases. Variables are case sensitive \u2014 so myage is a different variable from myAge. One last point: you also need to avoid using JavaScript reserved words as your variable names \u2014 by this, we mean the words that make up the actual syntax of JavaScript! So, you can't use words like var, function, let, and for as variable names. Browsers recognize them as different code items, and so you'll get errors. Variable Types \u00b6 There are a few different types of data we can store in variables. Note: JavaScript is a \"dynamically typed language\", which means that, unlike some other languages, you don't need to specify what data type a variable will contain (numbers, strings, arrays, etc). Numbers \u00b6 You can store numbers in variables, either whole numbers like 30 (also called integers) or decimal numbers like 2.456 (also called floats or floating point numbers). You don't need to declare variable types in JavaScript, unlike some other programming languages. When you give a variable a number value, you don't include quotes: 1 let myAge = 15 Strings \u00b6 Strings are pieces of text. When you give a variable a string value, you need to wrap it in single or double quote marks; otherwise, JavaScript tries to interpret it as another variable name. 1 let myName = 'John' ; Booleans \u00b6 Booleans are true/false values \u2014 they can have two values, true or false. These are generally used to test a condition, after which code is run as appropriate. So for example, a simple case would be: 1 let isLoggedIn = false ; Arrays \u00b6 An array is a single object that contains multiple values enclosed in square brackets and separated by commas. 1 2 let myNameArray = [ 'Chris' , 'Bob' , 'Jim' ]; let myNumberArray = [ 10 , 15 , 40 ]; Objects \u00b6 In programming, an object is a structure of code that models a real-life object. You can have a simple object that represents a box and contains information about its width, length, and height, or you could have an object that represents a person, and contains data about their name, height, weight, what language they speak, how to say hello to them, and more. 1 let dog = { name : 'Spot' , breed : 'Dalmatian' } ; To retrieve the information stored in the object, you can use the following syntax: 1 dog . name Constants \u00b6 Constants are used to store values that are immutable or can't be changed and are created with the keyword const. 1 const daysInWeek = 7 ; const works in exactly the same way as let, except that you can't give a const a new value. In the following example, the second line would throw an error: 1 2 const daysInWeek = 7 ; daysInWeek = 8 ;","title":"Variables"},{"location":"intro-to-javascript/02-variables/#variables","text":"Variables are containers for values (such as numbers, or strings of text). You create a variable with the keyword let (or var) followed by a name for your variable. 1 2 3 4 let name = 'Bob' ; console . log ( 'My name is ' + name ); name = 'Alice' ; console . log ( 'My name is ' + name );","title":"Variables"},{"location":"intro-to-javascript/02-variables/#naming-variables","text":"You can call a variable pretty much anything you like, but there are limitations. Generally, you should stick to just using Latin characters (0-9, a-z, A-Z) and the underscore character. You shouldn't use other characters because they may cause errors or be hard to understand for an international audience. Don't use underscores at the start of variable names \u2014 this is used in certain JavaScript constructs to mean specific things, so may get confusing. Don't use numbers at the start of variables. This isn't allowed and causes an error. A safe convention to stick to is so-called \"lower camel case\", where you stick together multiple words, using lower case for the whole first word and then capitalize subsequent words. We've been using this for our variable names in the article so far. Make variable names intuitive, so they describe the data they contain. Don't just use single letters/numbers, or big long phrases. Variables are case sensitive \u2014 so myage is a different variable from myAge. One last point: you also need to avoid using JavaScript reserved words as your variable names \u2014 by this, we mean the words that make up the actual syntax of JavaScript! So, you can't use words like var, function, let, and for as variable names. Browsers recognize them as different code items, and so you'll get errors.","title":"Naming variables"},{"location":"intro-to-javascript/02-variables/#variable-types","text":"There are a few different types of data we can store in variables. Note: JavaScript is a \"dynamically typed language\", which means that, unlike some other languages, you don't need to specify what data type a variable will contain (numbers, strings, arrays, etc).","title":"Variable Types"},{"location":"intro-to-javascript/02-variables/#numbers","text":"You can store numbers in variables, either whole numbers like 30 (also called integers) or decimal numbers like 2.456 (also called floats or floating point numbers). You don't need to declare variable types in JavaScript, unlike some other programming languages. When you give a variable a number value, you don't include quotes: 1 let myAge = 15","title":"Numbers"},{"location":"intro-to-javascript/02-variables/#strings","text":"Strings are pieces of text. When you give a variable a string value, you need to wrap it in single or double quote marks; otherwise, JavaScript tries to interpret it as another variable name. 1 let myName = 'John' ;","title":"Strings"},{"location":"intro-to-javascript/02-variables/#booleans","text":"Booleans are true/false values \u2014 they can have two values, true or false. These are generally used to test a condition, after which code is run as appropriate. So for example, a simple case would be: 1 let isLoggedIn = false ;","title":"Booleans"},{"location":"intro-to-javascript/02-variables/#arrays","text":"An array is a single object that contains multiple values enclosed in square brackets and separated by commas. 1 2 let myNameArray = [ 'Chris' , 'Bob' , 'Jim' ]; let myNumberArray = [ 10 , 15 , 40 ];","title":"Arrays"},{"location":"intro-to-javascript/02-variables/#objects","text":"In programming, an object is a structure of code that models a real-life object. You can have a simple object that represents a box and contains information about its width, length, and height, or you could have an object that represents a person, and contains data about their name, height, weight, what language they speak, how to say hello to them, and more. 1 let dog = { name : 'Spot' , breed : 'Dalmatian' } ; To retrieve the information stored in the object, you can use the following syntax: 1 dog . name","title":"Objects"},{"location":"intro-to-javascript/02-variables/#constants","text":"Constants are used to store values that are immutable or can't be changed and are created with the keyword const. 1 const daysInWeek = 7 ; const works in exactly the same way as let, except that you can't give a const a new value. In the following example, the second line would throw an error: 1 2 const daysInWeek = 7 ; daysInWeek = 8 ;","title":"Constants"},{"location":"intro-to-javascript/03-operators/","text":"Operators \u00b6 JavaScript operators allow us to perform tests, do math, join strings together, and other such things. First let's look at arithmetic operators, for example: Addition console.log(6 + 9); Subtraction console.log(20 - 15); Multiplication console.log(3 * 7); Division console.log(10 / 5); You can also use the + operator to join text strings together (in programming, this is called concatenation). 1 2 3 4 5 6 let name = 'Bingo' ; console . log ( name ); let hello = ' says hello!' ; console . log ( hello ); let greeting = name + hello ; console . log ( greeting ); There are also some shortcut operators available, called augmented assignment operators. For example, if you want to simply add a new text string to an existing one and return the result, you could do this: 1 2 3 let name = 'Bingo' ; name += ' says hello!' ; console . log ( name ); When we are running true/false tests (for example inside conditionals \u2014 see next lesson) we use comparison operators. For example: === Tests strict equality (is it exactly the same?) 1 2 3 4 5 === 2 + 4 ; // false 'Chris' === 'Bob' ; // false 5 === 2 + 3 ; // true 2 === '2' ; // false ; number versus string !== Tests non-equality (is it not the same?) 1 2 3 4 5 !== 2 + 4 ; // true 'Chris' !== 'Bob' ; // true 5 !== 2 + 3 ; // false 2 !== '2' ; // true ; number versus string < Tests less than, <= less than or equal 1 2 3 4 6 < 10 ; // true 20 < 10 ; // false 10 < 10 ; // false 10 <= 10 ; // true > Tests greater than, >= greater than or equal 1 2 3 4 6 > 10 ; // false 20 > 10 ; // true 10 > 10 ; // false 10 >= 10 ; // true","title":"Operators"},{"location":"intro-to-javascript/03-operators/#operators","text":"JavaScript operators allow us to perform tests, do math, join strings together, and other such things. First let's look at arithmetic operators, for example: Addition console.log(6 + 9); Subtraction console.log(20 - 15); Multiplication console.log(3 * 7); Division console.log(10 / 5); You can also use the + operator to join text strings together (in programming, this is called concatenation). 1 2 3 4 5 6 let name = 'Bingo' ; console . log ( name ); let hello = ' says hello!' ; console . log ( hello ); let greeting = name + hello ; console . log ( greeting ); There are also some shortcut operators available, called augmented assignment operators. For example, if you want to simply add a new text string to an existing one and return the result, you could do this: 1 2 3 let name = 'Bingo' ; name += ' says hello!' ; console . log ( name ); When we are running true/false tests (for example inside conditionals \u2014 see next lesson) we use comparison operators. For example: === Tests strict equality (is it exactly the same?) 1 2 3 4 5 === 2 + 4 ; // false 'Chris' === 'Bob' ; // false 5 === 2 + 3 ; // true 2 === '2' ; // false ; number versus string !== Tests non-equality (is it not the same?) 1 2 3 4 5 !== 2 + 4 ; // true 'Chris' !== 'Bob' ; // true 5 !== 2 + 3 ; // false 2 !== '2' ; // true ; number versus string < Tests less than, <= less than or equal 1 2 3 4 6 < 10 ; // true 20 < 10 ; // false 10 < 10 ; // false 10 <= 10 ; // true > Tests greater than, >= greater than or equal 1 2 3 4 6 > 10 ; // false 20 > 10 ; // true 10 > 10 ; // false 10 >= 10 ; // true","title":"Operators"},{"location":"intro-to-javascript/04-conditionals/","text":"Conditionals \u00b6 Conditional statements allow us to represent decision making in JavaScript, like asking a question (\"should I eat one cookie or two?\") Let's look at by far the most common type of conditional statement you'll use in JavaScript \u2014 the humble if...else statement. Basic syntax 1 2 3 4 5 6 7 let myCookieCount = 2 ; if ( myCookieCount >= 1 ) { alert ( ' I will eat a cookie ' ) ; } else { alert ( ' Time to buy more cookies ' ) ; } Here we've got: The keyword if followed by some parentheses. A condition to test, placed inside the parentheses (typically \"is this value bigger than this other value?\", or \"does this value exist?\"). The condition makes use of the comparison operators we discussed in the last module and returns true or false. A set of curly braces, inside which we have some code \u2014 this can be any code we like, and it only runs if the condition returns true. The keyword else. Another set of curly braces, inside which we have some more code \u2014 this can be any code we like, and it only runs if the condition is not true \u2014 or in other words, the condition is false. The last example provided us with two choices, or outcomes \u2014 but what if we want more than two? There is a way to chain on extra choices/outcomes to your if...else \u2014 using else if. Each extra choice requires an additional block to put in between if() { ... } and else { ... } 1 2 3 4 5 6 7 8 9 10 11 12 13 let myCookieCount = 10 ; if ( myCookieCount > 5 ) { alert ( ' I am going to get a stomach ache ' ) ; } else if ( myCookieCount >= 1 ) { alert ( ' I will eat a cookie ' ) ; } else if ( myCookieCount == 0 ) { alert ( ' Time to buy more cookies ' ) ; } else { alert ( ' How do you have negative cookies?! ' ) ; }","title":"Conditionals"},{"location":"intro-to-javascript/04-conditionals/#conditionals","text":"Conditional statements allow us to represent decision making in JavaScript, like asking a question (\"should I eat one cookie or two?\") Let's look at by far the most common type of conditional statement you'll use in JavaScript \u2014 the humble if...else statement. Basic syntax 1 2 3 4 5 6 7 let myCookieCount = 2 ; if ( myCookieCount >= 1 ) { alert ( ' I will eat a cookie ' ) ; } else { alert ( ' Time to buy more cookies ' ) ; } Here we've got: The keyword if followed by some parentheses. A condition to test, placed inside the parentheses (typically \"is this value bigger than this other value?\", or \"does this value exist?\"). The condition makes use of the comparison operators we discussed in the last module and returns true or false. A set of curly braces, inside which we have some code \u2014 this can be any code we like, and it only runs if the condition returns true. The keyword else. Another set of curly braces, inside which we have some more code \u2014 this can be any code we like, and it only runs if the condition is not true \u2014 or in other words, the condition is false. The last example provided us with two choices, or outcomes \u2014 but what if we want more than two? There is a way to chain on extra choices/outcomes to your if...else \u2014 using else if. Each extra choice requires an additional block to put in between if() { ... } and else { ... } 1 2 3 4 5 6 7 8 9 10 11 12 13 let myCookieCount = 10 ; if ( myCookieCount > 5 ) { alert ( ' I am going to get a stomach ache ' ) ; } else if ( myCookieCount >= 1 ) { alert ( ' I will eat a cookie ' ) ; } else if ( myCookieCount == 0 ) { alert ( ' Time to buy more cookies ' ) ; } else { alert ( ' How do you have negative cookies?! ' ) ; }","title":"Conditionals"},{"location":"intro-to-javascript/05-functions/","text":"Functions \u00b6 Functions are reusable blocks of code that you can write once and run again and again, saving the need to keep repeating code all the time. This is really useful. There are a number of ways to define functions, but for now we'll concentrate on one simple type. Here we have defined a function by using the keyword function, followed by a name, with parentheses put after it. After that we put two curly braces ({ }). Inside the curly braces goes all the code that we want to run whenever we call the function. When we want to run the code, we type the name of the function followed by the parentheses. 1 2 3 4 5 6 7 function issueGreeting () { console . log ( 'Hello ' + name + '! And welcome to our site.' ); } let name = 'Jessie' ; issueGreeting (); let name = 'James' ; issueGreeting (); Function parameters \u00b6 We can make the above code even easier using parameters, this allows us to pass values for our function to use, kind of like setting a variable specifically for our function to use. 1 2 3 4 5 function issueGreeting ( name ) { console . log ( 'Hello ' + name + '! And welcome to our site.' ); } issueGreeting ( 'Jessie' ); issueGreeting ( 'James' );","title":"Functions"},{"location":"intro-to-javascript/05-functions/#functions","text":"Functions are reusable blocks of code that you can write once and run again and again, saving the need to keep repeating code all the time. This is really useful. There are a number of ways to define functions, but for now we'll concentrate on one simple type. Here we have defined a function by using the keyword function, followed by a name, with parentheses put after it. After that we put two curly braces ({ }). Inside the curly braces goes all the code that we want to run whenever we call the function. When we want to run the code, we type the name of the function followed by the parentheses. 1 2 3 4 5 6 7 function issueGreeting () { console . log ( 'Hello ' + name + '! And welcome to our site.' ); } let name = 'Jessie' ; issueGreeting (); let name = 'James' ; issueGreeting ();","title":"Functions"},{"location":"intro-to-javascript/05-functions/#function-parameters","text":"We can make the above code even easier using parameters, this allows us to pass values for our function to use, kind of like setting a variable specifically for our function to use. 1 2 3 4 5 function issueGreeting ( name ) { console . log ( 'Hello ' + name + '! And welcome to our site.' ); } issueGreeting ( 'Jessie' ); issueGreeting ( 'James' );","title":"Function parameters"},{"location":"intro-to-javascript/06-events/","text":"Events \u00b6 Events are actions or occurrences that happen in the system you are programming, which the system tells you about so you can respond to them in some way if desired. For example, if the user selects a button on a webpage, you might want to respond to that action by displaying an information box In the case of the Web, events are fired inside the browser window, and tend to be attached to a specific item that resides in it \u2014 this might be a single element, set of elements, the HTML document loaded in the current tab, or the entire browser window. There are many different types of events that can occur. For example: The user selects a certain element or hovers the cursor over a certain element. The user chooses a key on the keyboard. The user resizes or closes the browser window. A web page finishes loading. A form is submitted. A video is played, paused, or finishes. An error occurs. Each event can have an event handler, which is a block of code (usually a JavaScript function that you as a programmer create) that runs when the event fires. Let's use a button click event as an example to learn how we can create event handlers. You've probably seen events and event handlers used in some of the other examples, but let's take a closer look. First we need to create a button so that we have an html element to click on. Place the following code in your html body: 1 <button> Change color </button> Now we need the JavaScript to handle the click event. Place the following in your script.js file: 1 2 3 4 5 6 7 8 9 10 const btn = document . querySelector ( ' button ' ) ; function random ( number ) { return Math . floor ( Math . random () * ( number + 1 )) ; } btn . onclick = function () { const rndCol = ' rgb( ' + random ( 255 ) + ' , ' + random ( 255 ) + ' , ' + random ( 255 ) + ' ) ' ; btn . style . background = rndCol ; } Run the site and you should be able to see the button color change when you click on it. In this code, we store a reference to the button inside a constant called btn, using the Document.querySelector() function. We also define a function that returns a random number. The third part of the code is the event handler. The btn constant points to a button element, and this type of object has a number of events that can fire on it, and therefore, event handlers available. We are listening for the click event firing, by setting the onclick event handler property to equal a function containing code that generates a random RGB color and sets the background color equal to it. This code is run whenever the click event fires on the button element, that is, whenever a user selects it. There are many different event handler properties available. Feel free to experiment. Try changing btn.onclick to the following different values in turn, and observing the results in the example: btn.onfocus and btn.onblur \u2014 The color changes when the button is focused and unfocused; try pressing the tab to focus on the button and press the tab again to focus away from the button. These are often used to display information about filling in form fields when they are focused, or displaying an error message if a form field is filled with an incorrect value. btn.ondblclick \u2014 The color changes only when the button is double-clicked. window.onkeypress, window.onkeydown, window.onkeyup \u2014 The color changes when a key is pressed on the keyboard. The keypress event refers to a general press (button down and then up), while keydown and keyup refer to just the key down and key up parts of the keystroke, respectively. Note: It doesn't work if you try to register this event handler on the button itself \u2014 we've had to register it on the window object, which represents the entire browser window. btn.onmouseover and btn.onmouseout \u2014 The color changes when the mouse pointer hovers over the button, or when the pointer moves off the button, respectively. You can also bind an event handler using the following code: 1 btn . addEventListener ( 'click' , function ); The behavior of addEventListener() is very similar, but allows you to add multiple handlers to the same event or even dynamically remove them. This method takes two arguments, a string of the event, and either a function name to run, or a new anonymous function. It is useful for larger and more complex sites.","title":"Events"},{"location":"intro-to-javascript/06-events/#events","text":"Events are actions or occurrences that happen in the system you are programming, which the system tells you about so you can respond to them in some way if desired. For example, if the user selects a button on a webpage, you might want to respond to that action by displaying an information box In the case of the Web, events are fired inside the browser window, and tend to be attached to a specific item that resides in it \u2014 this might be a single element, set of elements, the HTML document loaded in the current tab, or the entire browser window. There are many different types of events that can occur. For example: The user selects a certain element or hovers the cursor over a certain element. The user chooses a key on the keyboard. The user resizes or closes the browser window. A web page finishes loading. A form is submitted. A video is played, paused, or finishes. An error occurs. Each event can have an event handler, which is a block of code (usually a JavaScript function that you as a programmer create) that runs when the event fires. Let's use a button click event as an example to learn how we can create event handlers. You've probably seen events and event handlers used in some of the other examples, but let's take a closer look. First we need to create a button so that we have an html element to click on. Place the following code in your html body: 1 <button> Change color </button> Now we need the JavaScript to handle the click event. Place the following in your script.js file: 1 2 3 4 5 6 7 8 9 10 const btn = document . querySelector ( ' button ' ) ; function random ( number ) { return Math . floor ( Math . random () * ( number + 1 )) ; } btn . onclick = function () { const rndCol = ' rgb( ' + random ( 255 ) + ' , ' + random ( 255 ) + ' , ' + random ( 255 ) + ' ) ' ; btn . style . background = rndCol ; } Run the site and you should be able to see the button color change when you click on it. In this code, we store a reference to the button inside a constant called btn, using the Document.querySelector() function. We also define a function that returns a random number. The third part of the code is the event handler. The btn constant points to a button element, and this type of object has a number of events that can fire on it, and therefore, event handlers available. We are listening for the click event firing, by setting the onclick event handler property to equal a function containing code that generates a random RGB color and sets the background color equal to it. This code is run whenever the click event fires on the button element, that is, whenever a user selects it. There are many different event handler properties available. Feel free to experiment. Try changing btn.onclick to the following different values in turn, and observing the results in the example: btn.onfocus and btn.onblur \u2014 The color changes when the button is focused and unfocused; try pressing the tab to focus on the button and press the tab again to focus away from the button. These are often used to display information about filling in form fields when they are focused, or displaying an error message if a form field is filled with an incorrect value. btn.ondblclick \u2014 The color changes only when the button is double-clicked. window.onkeypress, window.onkeydown, window.onkeyup \u2014 The color changes when a key is pressed on the keyboard. The keypress event refers to a general press (button down and then up), while keydown and keyup refer to just the key down and key up parts of the keystroke, respectively. Note: It doesn't work if you try to register this event handler on the button itself \u2014 we've had to register it on the window object, which represents the entire browser window. btn.onmouseover and btn.onmouseout \u2014 The color changes when the mouse pointer hovers over the button, or when the pointer moves off the button, respectively. You can also bind an event handler using the following code: 1 btn . addEventListener ( 'click' , function ); The behavior of addEventListener() is very similar, but allows you to add multiple handlers to the same event or even dynamically remove them. This method takes two arguments, a string of the event, and either a function name to run, or a new anonymous function. It is useful for larger and more complex sites.","title":"Events"},{"location":"intro-to-javascript/07-bringing-it-together/","text":"Bring it all together \u00b6 Create a new project in Repl.it or Glitch and place the following div element in the body of the index.html file: 1 2 3 4 5 6 <div> <input type= \"text\" id= \"name\" class= \"nameField\" > <button class= \"greet\" > Greet </button> </div> This will give us a text field and a button that we can bind Javascript to. Add the following code to the script.js file. 1 2 3 4 5 6 7 8 9 10 const nameField = document . querySelector ( '.nameField' ); const greet = document . querySelector ( '.greet' ); function issueGreeting () { let name = nameField . value ; let hello = 'Hello ' ; let greeting = hello + name + '!' ; alert ( greeting ); } greet . addEventListener ( 'click' , issueGreeting ); Note: document.querySelector('.someClass') is an easy way to refer to html elements using an identifying class, we won't get into the mechanics during this intro course Now view your site. Enter a name in the text field and click the 'Greet' button. You should see an alert pop up greeting you by name. For a more interesting example to walk through, enter the following html into your body tag: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < h1 > Number guessing game </ h1 > < p > We have selected a random number between 1 and 100 . See if you can guess it in 10 turns or fewer . We ' ll tell you if your guess was too high or too low.</p> < div class = \" form \" > < label for = \" guessField \" > Enter a guess : </ label > < input type = \" text \" id = \" guessField \" class = \" guessField \" > < input type = \" submit \" value = \" Submit guess \" class = \" guessSubmit \" > </ div > < div class = \" resultParas \" > < p class = \" guesses \" ></ p > < p class = \" lastResult \" ></ p > < p class = \" lowOrHi \" ></ p > </ div > And the following Javascript into your script.js file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 let randomNumber = Math . floor ( Math . random () * 100 ) + 1 ; const guesses = document . querySelector ( ' .guesses ' ) ; const lastResult = document . querySelector ( ' .lastResult ' ) ; const lowOrHi = document . querySelector ( ' .lowOrHi ' ) ; const guessSubmit = document . querySelector ( ' .guessSubmit ' ) ; const guessField = document . querySelector ( ' .guessField ' ) ; let guessCount = 1 ; let resetButton ; function checkGuess () { let userGuess = Number ( guessField . value ) ; if ( guessCount === 1 ) { guesses . textContent = ' Previous guesses: ' ; } guesses . textContent += userGuess + ' ' ; if ( userGuess === randomNumber ) { lastResult . textContent = ' Congratulations! You got it right! ' ; lastResult . style . backgroundColor = ' green ' ; lowOrHi . textContent = '' ; setGameOver () ; } else if ( guessCount === 10 ) { lastResult . textContent = ' !!!GAME OVER!!! ' ; setGameOver () ; } else { lastResult . textContent = ' Wrong! ' ; lastResult . style . backgroundColor = ' red ' ; if ( userGuess < randomNumber ) { lowOrHi . textContent = ' Last guess was too low! ' ; } else if ( userGuess > randomNumber ) { lowOrHi . textContent = ' Last guess was too high! ' ; } } guessCount ++ ; guessField . value = '' ; guessField . focus () ; } function setGameOver () { guessField . disabled = true ; guessSubmit . disabled = true ; } guessSubmit . addEventListener ( ' click ' , checkGuess ) ;","title":"Bring it all together"},{"location":"intro-to-javascript/07-bringing-it-together/#bring-it-all-together","text":"Create a new project in Repl.it or Glitch and place the following div element in the body of the index.html file: 1 2 3 4 5 6 <div> <input type= \"text\" id= \"name\" class= \"nameField\" > <button class= \"greet\" > Greet </button> </div> This will give us a text field and a button that we can bind Javascript to. Add the following code to the script.js file. 1 2 3 4 5 6 7 8 9 10 const nameField = document . querySelector ( '.nameField' ); const greet = document . querySelector ( '.greet' ); function issueGreeting () { let name = nameField . value ; let hello = 'Hello ' ; let greeting = hello + name + '!' ; alert ( greeting ); } greet . addEventListener ( 'click' , issueGreeting ); Note: document.querySelector('.someClass') is an easy way to refer to html elements using an identifying class, we won't get into the mechanics during this intro course Now view your site. Enter a name in the text field and click the 'Greet' button. You should see an alert pop up greeting you by name. For a more interesting example to walk through, enter the following html into your body tag: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < h1 > Number guessing game </ h1 > < p > We have selected a random number between 1 and 100 . See if you can guess it in 10 turns or fewer . We ' ll tell you if your guess was too high or too low.</p> < div class = \" form \" > < label for = \" guessField \" > Enter a guess : </ label > < input type = \" text \" id = \" guessField \" class = \" guessField \" > < input type = \" submit \" value = \" Submit guess \" class = \" guessSubmit \" > </ div > < div class = \" resultParas \" > < p class = \" guesses \" ></ p > < p class = \" lastResult \" ></ p > < p class = \" lowOrHi \" ></ p > </ div > And the following Javascript into your script.js file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 let randomNumber = Math . floor ( Math . random () * 100 ) + 1 ; const guesses = document . querySelector ( ' .guesses ' ) ; const lastResult = document . querySelector ( ' .lastResult ' ) ; const lowOrHi = document . querySelector ( ' .lowOrHi ' ) ; const guessSubmit = document . querySelector ( ' .guessSubmit ' ) ; const guessField = document . querySelector ( ' .guessField ' ) ; let guessCount = 1 ; let resetButton ; function checkGuess () { let userGuess = Number ( guessField . value ) ; if ( guessCount === 1 ) { guesses . textContent = ' Previous guesses: ' ; } guesses . textContent += userGuess + ' ' ; if ( userGuess === randomNumber ) { lastResult . textContent = ' Congratulations! You got it right! ' ; lastResult . style . backgroundColor = ' green ' ; lowOrHi . textContent = '' ; setGameOver () ; } else if ( guessCount === 10 ) { lastResult . textContent = ' !!!GAME OVER!!! ' ; setGameOver () ; } else { lastResult . textContent = ' Wrong! ' ; lastResult . style . backgroundColor = ' red ' ; if ( userGuess < randomNumber ) { lowOrHi . textContent = ' Last guess was too low! ' ; } else if ( userGuess > randomNumber ) { lowOrHi . textContent = ' Last guess was too high! ' ; } } guessCount ++ ; guessField . value = '' ; guessField . focus () ; } function setGameOver () { guessField . disabled = true ; guessSubmit . disabled = true ; } guessSubmit . addEventListener ( ' click ' , checkGuess ) ;","title":"Bring it all together"},{"location":"svg/01-intro/","text":"Introduction to SVG and Canvas \u00b6 SVG Labs \u00b6 Getting Started HTML Template for testing SVG Basic shapes SVG Circle SVG Line SVG Rectangle SVG Ellipse SVG Polygon - used to create hexagons, octagons and stars SVG Polyline SVG Paths SVG Text SVG Text Effects SVG Gradients SVG Gallery of Fun Example https://www.w3schools.com/graphics/svg_intro.asp Canvas \u00b6 Canvas is the HTML element that holds a drawing region on a web page using JavaScript. We can use a canvas program to do animations, write games. Before you dive into these labs you will need to know both some SVG and JavaScript to modify the demos.","title":"Introduction"},{"location":"svg/01-intro/#introduction-to-svg-and-canvas","text":"","title":"Introduction to SVG and Canvas"},{"location":"svg/01-intro/#svg-labs","text":"Getting Started HTML Template for testing SVG Basic shapes SVG Circle SVG Line SVG Rectangle SVG Ellipse SVG Polygon - used to create hexagons, octagons and stars SVG Polyline SVG Paths SVG Text SVG Text Effects SVG Gradients SVG Gallery of Fun Example https://www.w3schools.com/graphics/svg_intro.asp","title":"SVG Labs"},{"location":"svg/01-intro/#canvas","text":"Canvas is the HTML element that holds a drawing region on a web page using JavaScript. We can use a canvas program to do animations, write games. Before you dive into these labs you will need to know both some SVG and JavaScript to modify the demos.","title":"Canvas"},{"location":"svg/02-circle/","text":"Drawing a Circle with SVG \u00b6 Lets start with drawing a single circle. We will need to tell our web browser to draw it in a region that is 100 pixels high and 100 pixels wide. We then need to tell the web browser where to center the circle in both the X and Y dimensions (cx and cy) and what the radius of the circle should be. Here is an example: 1 2 3 < svg height = \"100\" width = \"100\" > < circle cx = \"50\" cy = \"50\" r = \"40\" /> </ svg > This example will generate the following circle: That is kind of a dark circle. Let's fill in the circle with blue and make the border be red. We will do this by adding the fill, stroke (for the color of the border) and the stroke-width that will change the width of the border of the circle. 1 2 3 < svg height = \"100\" width = \"100\" > < circle cx = \"50\" cy = \"50\" r = \"40\" stroke = \"red\" stroke-width = \"4\" fill = \"blue\" /> </ svg > This will generate the following result: Try changing the color of the fill or the stroke and see what happens! Run on JS Fiddle.net \u00b6 Run on Fiddle","title":"Circle"},{"location":"svg/02-circle/#drawing-a-circle-with-svg","text":"Lets start with drawing a single circle. We will need to tell our web browser to draw it in a region that is 100 pixels high and 100 pixels wide. We then need to tell the web browser where to center the circle in both the X and Y dimensions (cx and cy) and what the radius of the circle should be. Here is an example: 1 2 3 < svg height = \"100\" width = \"100\" > < circle cx = \"50\" cy = \"50\" r = \"40\" /> </ svg > This example will generate the following circle: That is kind of a dark circle. Let's fill in the circle with blue and make the border be red. We will do this by adding the fill, stroke (for the color of the border) and the stroke-width that will change the width of the border of the circle. 1 2 3 < svg height = \"100\" width = \"100\" > < circle cx = \"50\" cy = \"50\" r = \"40\" stroke = \"red\" stroke-width = \"4\" fill = \"blue\" /> </ svg > This will generate the following result: Try changing the color of the fill or the stroke and see what happens!","title":"Drawing a Circle with SVG"},{"location":"svg/02-circle/#run-on-js-fiddlenet","text":"Run on Fiddle","title":"Run on JS Fiddle.net"},{"location":"svg/03-line/","text":"Drawing Lines with SVG \u00b6 1 2 3 < svg height = \"100\" width = \"100\" > < line x1 = \"20\" y1 = \"10\" x2 = \"90\" y2 = \"80\" stroke = \"green\" stroke-width = \"5\" /> </ svg > This example will generate the following circle: Maze example \u00b6 You can use lines to generate things like the maze below: 6 by 6 orthogonal maze 6 by 6 orthogonal maze generated by The Maze Generator Website (http://www.mazegenerator.net/). To generate the maze above I used Maze Generator and set the size to be a 6X6 maze. I then used the SVG output option.","title":"Line"},{"location":"svg/03-line/#drawing-lines-with-svg","text":"1 2 3 < svg height = \"100\" width = \"100\" > < line x1 = \"20\" y1 = \"10\" x2 = \"90\" y2 = \"80\" stroke = \"green\" stroke-width = \"5\" /> </ svg > This example will generate the following circle:","title":"Drawing Lines with SVG"},{"location":"svg/03-line/#maze-example","text":"You can use lines to generate things like the maze below: 6 by 6 orthogonal maze 6 by 6 orthogonal maze generated by The Maze Generator Website (http://www.mazegenerator.net/). To generate the maze above I used Maze Generator and set the size to be a 6X6 maze. I then used the SVG output option.","title":"Maze example"},{"location":"svg/04-rectangle/","text":"Drawing Rectangles with SVG \u00b6 Next we will draw a rectangle 1 2 3 4 <svg height= \"200\" width= \"200\" > <rect x= \"10\" y= \"20\" width= \"150\" height= \"100\" fill= \"lightblue\" stroke-width= \"3\" ; stroke= \"purple\" /> </svg> This example will generate the following rectangle:","title":"Rectangle"},{"location":"svg/04-rectangle/#drawing-rectangles-with-svg","text":"Next we will draw a rectangle 1 2 3 4 <svg height= \"200\" width= \"200\" > <rect x= \"10\" y= \"20\" width= \"150\" height= \"100\" fill= \"lightblue\" stroke-width= \"3\" ; stroke= \"purple\" /> </svg> This example will generate the following rectangle:","title":"Drawing Rectangles with SVG"},{"location":"svg/05-ellipse/","text":"Drawing Ellipse with SVG \u00b6 An ellipse can be thought of as a circle that is not perfectly round. The height and width of an ellipse may be different. In SVG, the ellipse element does not have a single radius like a circle, but it has both a horizontal and a vertical radius. Here are the attributes of an ellipse element: cx - the x or horizontal dimension of the circle's center cy - the y or vertical dimension of the circle's center rx - the x or horizontal radius of the ellipse ry - the y or vertical radius of the ellipse Example Markup for SVG Ellipse \u00b6 This example will generate an ellipse: 1 2 3 4 < svg height = \"200\" width = \"200\" > < ellipse cx = \"100\" cy = \"80\" rx = \"100\" ry = \"50\" fill = \"yellow\" stroke-width = \"3\" ; stroke = \"purple\" /> </ svg > Note that the second line has the color and width of the border. Rendering of SVG Ellipse \u00b6 Note that the first line is about positioning and size. The properties in the second line can also be determined by SVG CSS properties.","title":"Ellipse"},{"location":"svg/05-ellipse/#drawing-ellipse-with-svg","text":"An ellipse can be thought of as a circle that is not perfectly round. The height and width of an ellipse may be different. In SVG, the ellipse element does not have a single radius like a circle, but it has both a horizontal and a vertical radius. Here are the attributes of an ellipse element: cx - the x or horizontal dimension of the circle's center cy - the y or vertical dimension of the circle's center rx - the x or horizontal radius of the ellipse ry - the y or vertical radius of the ellipse","title":"Drawing Ellipse with SVG"},{"location":"svg/05-ellipse/#example-markup-for-svg-ellipse","text":"This example will generate an ellipse: 1 2 3 4 < svg height = \"200\" width = \"200\" > < ellipse cx = \"100\" cy = \"80\" rx = \"100\" ry = \"50\" fill = \"yellow\" stroke-width = \"3\" ; stroke = \"purple\" /> </ svg > Note that the second line has the color and width of the border.","title":"Example Markup for SVG Ellipse"},{"location":"svg/05-ellipse/#rendering-of-svg-ellipse","text":"Note that the first line is about positioning and size. The properties in the second line can also be determined by SVG CSS properties.","title":"Rendering of SVG Ellipse"},{"location":"svg/06-polygon/","text":"Drawing A Polygon with SVG \u00b6 A polygon is a figure with an arbitrary number of straight sides. We can use the polygon element to make many different shapes such as triangles, hexagons and octagons. To draw a polygon we use a points attribute to specify each of the x,y pairs we need to draw the polygon. Here is an example of a blue triangle: Drawing a Triangle \u00b6 1 2 3 4 < svg height = \"100\" width = \"100\" > < polygon points = \"10,90 90,90 50,10\" fill = \"blue\" stroke = \"orange\" stroke-width = \"3\" /> </ svg > Which renders like this: Note that the first point is in the lower-left corner (x=10, y=90). The second point is in the right corner (x=90, y=90) and the last point is in the top center (x=50, y=10). Note that this triangle is called an isosceles because two of the sides are exactly the same length. We don't have to make the edges the same size. We can move the points to make any arbitrary shape. 1 2 3 4 < svg height = \"100\" width = \"100\" > < polygon points = \"30,90 90,70 40,10\" fill = \"blue\" stroke = \"orange\" stroke-width = \"3\" /> </ svg > Which renders like this: Drawing A Hexagon \u00b6 A hexagon is a shape with six sides. 1 2 3 4 < svg height = \"300\" width = \"300\" > < polygon points = \"300,150 225,280 75,280 0,150 75,20 225,20\" fill = \"orange\" stroke = \"blue\" stroke-width = \"3\" /> </ svg > Drawing an Octagon \u00b6 An Octagon is a shape with eight sides. You might recognize this as the shape of a STOP sign. 1 2 3 4 < svg height = \"125\" width = \"125\" > < polygon points = \"50,5 100,5 125,30 125,80 100,105 50,105 25,80 25, 30\" ill = \"red\" stroke = \"silver\" stroke-width = \"5\" /> </ svg > Five Pointed Star \u00b6 1 2 3 4 5 6 7 < svg width = \"100\" height = \"100\" > < polygon points = \"50,10 55,30 70,30 60,40 65,55 50,45 35,55 40,40 30,30 45,30\" stroke = \"Blue\" fill = \"LightBlue\" stroke-width = \"2\" /> </ svg > 10 Pointed Star \u00b6 Here is what a 10 pointed star looks like in SVG: 1 2 3 4 5 6 7 8 9 10 11 < svg width = \"100\" height = \"100\" > < polygon points = \"50,80 65.451,97.553 67.634,74.271 90.451,79.389 78.532,59.271 100.000,50.000 78.532,40.729 90.451,20.611 67.634,25.729 65.451,2.447 50.000,20.000 34.549,2.447 32.366,25.729 9.549,20.611 21.468,40.729 0.000,50.000 21.468,59.271 9.549,79.389 32.366,74.271 34.549,97.553 50.000,80.000\" stroke = \"black\" fill = \"yellow\" stroke-width = \"2\" /> </ svg > And here is how that renders: If you want to create your own stars, you can do it with this tool: See SVG Star Generator We will learn about paths next!","title":"Polygon"},{"location":"svg/06-polygon/#drawing-a-polygon-with-svg","text":"A polygon is a figure with an arbitrary number of straight sides. We can use the polygon element to make many different shapes such as triangles, hexagons and octagons. To draw a polygon we use a points attribute to specify each of the x,y pairs we need to draw the polygon. Here is an example of a blue triangle:","title":"Drawing A Polygon with SVG"},{"location":"svg/06-polygon/#drawing-a-triangle","text":"1 2 3 4 < svg height = \"100\" width = \"100\" > < polygon points = \"10,90 90,90 50,10\" fill = \"blue\" stroke = \"orange\" stroke-width = \"3\" /> </ svg > Which renders like this: Note that the first point is in the lower-left corner (x=10, y=90). The second point is in the right corner (x=90, y=90) and the last point is in the top center (x=50, y=10). Note that this triangle is called an isosceles because two of the sides are exactly the same length. We don't have to make the edges the same size. We can move the points to make any arbitrary shape. 1 2 3 4 < svg height = \"100\" width = \"100\" > < polygon points = \"30,90 90,70 40,10\" fill = \"blue\" stroke = \"orange\" stroke-width = \"3\" /> </ svg > Which renders like this:","title":"Drawing a Triangle"},{"location":"svg/06-polygon/#drawing-a-hexagon","text":"A hexagon is a shape with six sides. 1 2 3 4 < svg height = \"300\" width = \"300\" > < polygon points = \"300,150 225,280 75,280 0,150 75,20 225,20\" fill = \"orange\" stroke = \"blue\" stroke-width = \"3\" /> </ svg >","title":"Drawing A Hexagon"},{"location":"svg/06-polygon/#drawing-an-octagon","text":"An Octagon is a shape with eight sides. You might recognize this as the shape of a STOP sign. 1 2 3 4 < svg height = \"125\" width = \"125\" > < polygon points = \"50,5 100,5 125,30 125,80 100,105 50,105 25,80 25, 30\" ill = \"red\" stroke = \"silver\" stroke-width = \"5\" /> </ svg >","title":"Drawing an Octagon"},{"location":"svg/06-polygon/#five-pointed-star","text":"1 2 3 4 5 6 7 < svg width = \"100\" height = \"100\" > < polygon points = \"50,10 55,30 70,30 60,40 65,55 50,45 35,55 40,40 30,30 45,30\" stroke = \"Blue\" fill = \"LightBlue\" stroke-width = \"2\" /> </ svg >","title":"Five Pointed Star"},{"location":"svg/06-polygon/#10-pointed-star","text":"Here is what a 10 pointed star looks like in SVG: 1 2 3 4 5 6 7 8 9 10 11 < svg width = \"100\" height = \"100\" > < polygon points = \"50,80 65.451,97.553 67.634,74.271 90.451,79.389 78.532,59.271 100.000,50.000 78.532,40.729 90.451,20.611 67.634,25.729 65.451,2.447 50.000,20.000 34.549,2.447 32.366,25.729 9.549,20.611 21.468,40.729 0.000,50.000 21.468,59.271 9.549,79.389 32.366,74.271 34.549,97.553 50.000,80.000\" stroke = \"black\" fill = \"yellow\" stroke-width = \"2\" /> </ svg > And here is how that renders: If you want to create your own stars, you can do it with this tool: See SVG Star Generator We will learn about paths next!","title":"10 Pointed Star"},{"location":"svg/07-polyline/","text":"Drawing A Polygon with SVG \u00b6 A polyline element is used to create any drawing that consists of only strait lines. It is very similar to the polygon in that it uses a points attribute to store the points. SVG Polyline Drawing \u00b6 1 2 3 4 < svg height = \"160\" width = \"200\" > < polyline points = \"0,40 40,40 40,80 80,80 80,120 120,120 120,160\" fill = \"none\" stroke = \"purple\" stroke-width = \"3\" /> </ svg > Note that we must use the fill=none attribute or the rendering tool will try to fill in the area inside the polyline. This may not be the effect that you want!","title":"Polyline"},{"location":"svg/07-polyline/#drawing-a-polygon-with-svg","text":"A polyline element is used to create any drawing that consists of only strait lines. It is very similar to the polygon in that it uses a points attribute to store the points.","title":"Drawing A Polygon with SVG"},{"location":"svg/07-polyline/#svg-polyline-drawing","text":"1 2 3 4 < svg height = \"160\" width = \"200\" > < polyline points = \"0,40 40,40 40,80 80,80 80,120 120,120 120,160\" fill = \"none\" stroke = \"purple\" stroke-width = \"3\" /> </ svg > Note that we must use the fill=none attribute or the rendering tool will try to fill in the area inside the polyline. This may not be the effect that you want!","title":"SVG Polyline Drawing"},{"location":"svg/08-path/","text":"Drawing A Paths with SVG \u00b6 Up until now, the SVG examples we were showing you were all pretty simple. They were not very different from the Turtle Graphics drawings that we generated in Scratch or with our turtle graphics libraries in Python. But now we will start to really show how the SVG standard is really impressive. And this is where SVG paths come in. In SVG, the path operator is considered the most powerful tool in our drawing library! The d attribute is the way that that we pass our drawing data to the path element. But d is really, really smart. It knows how to move to any point in our drawing area and then use relative horizontal and vertical drawing commands from that initial moveto point. Here are the three initial \"commands that we will use: M - move to any X,Y point H - move Horizontally V - move Vertically L - draw a line to a given point (Lineto) Simple Paths with Move, Horizontal, Vertical and Lineto Commands \u00b6 Here is the path element used to draw a simple square 1 2 3 4 < svg width = \"100\" height = \"100\" > < path d = \"M 10,10 H 90 V 90 H 10 L 10,10\" fill = \"none\" stroke = \"blue\" stroke-width = \"3\" /> </ svg > Closing Your Path With \"Z\" \u00b6 Sometimes you don't want to put in that last Lineto command. You can just use the letter \"z\" to tell it where to go back to the starting point. 1 2 3 4 < svg width = \"100\" height = \"100\" > < path d = \"M 10,10 H 90 V 90 H 10 Z\" fill = \"none\" stroke = \"blue\" stroke-width = \"3\" /> </ svg > Curve commands \u00b6 Now that you have the basics of path commands drawing straight lines, lets have some fun with drawing curves. You can always draw curves with lots and lots of small short lines. But it is very inefficient to send thousands of little drawing commands to the web browser. What if we could just tell the web browser to draw a graceful curve between points? That is where the SVG Path Curve command comes in handy. To create a curve you need to: 1. Define the endpoints - the start and the end of the curve. 2. Supply one or two \"control points\" that govern the general shape of the curve. A B\u00e9zier curve with one control point is called a quadratic B\u00e9zier curve (Q command) and the kind with two control points is called cubic (C command). C - Draw a Cubic B\u00e9zier curve using x1 y1, x2 y2 and x y Q - Draw a Quadradic B\u00e9zier curve using x1 y1, x2 y2 and x y Here is the SVG code that draws a curve from (10,10) through 100,100 and ends at (200, 10). 1 2 3 4 < svg width = \"100\" height = \"100\" > < path d = \"M 10,10 C 20,20 100,100 200,10\" stroke = \"black\" fill = \"transparent\" /> </ svg > Here is what it looks like: Note that there are a few differences. We don't just add the center point of the curve. We also tell the direction to proceed from the origin (in a diagonal line from 10,10 to 20,20) is one additional point. The center point of the curve is 100,100 and the final point is 200,10 Sawtooth vs Sine Wave \u00b6 A sawtooth wave is a wave that has straight lines that go from a minimum to a maximum. 1 2 3 4 5 6 < svg width = \"700\" height = \"110\" > < path d = \"M 0,0 L 100,100 L 200,0 L 300,100 L 400,0 L 500,100 L 600,0 L 700,100 L 800,0\" stroke = \"black\" fill = \"none\" stroke-width = \"3\" /> <!-- This is the axis line --> < path d = \"M 0,50 L 700,50\" fill = \"none\" stroke = \"silver\" stroke-width = \"1\" > </ svg > Here is the same wave using curves: Sawtooth with Quadratic Curve \u00b6 Sawtooth with Cubic Curve \u00b6 TBD get a simple sawtooth with curves: Sample top to bottom: Pull up with magnets:","title":"Path"},{"location":"svg/08-path/#drawing-a-paths-with-svg","text":"Up until now, the SVG examples we were showing you were all pretty simple. They were not very different from the Turtle Graphics drawings that we generated in Scratch or with our turtle graphics libraries in Python. But now we will start to really show how the SVG standard is really impressive. And this is where SVG paths come in. In SVG, the path operator is considered the most powerful tool in our drawing library! The d attribute is the way that that we pass our drawing data to the path element. But d is really, really smart. It knows how to move to any point in our drawing area and then use relative horizontal and vertical drawing commands from that initial moveto point. Here are the three initial \"commands that we will use: M - move to any X,Y point H - move Horizontally V - move Vertically L - draw a line to a given point (Lineto)","title":"Drawing A Paths with SVG"},{"location":"svg/08-path/#simple-paths-with-move-horizontal-vertical-and-lineto-commands","text":"Here is the path element used to draw a simple square 1 2 3 4 < svg width = \"100\" height = \"100\" > < path d = \"M 10,10 H 90 V 90 H 10 L 10,10\" fill = \"none\" stroke = \"blue\" stroke-width = \"3\" /> </ svg >","title":"Simple Paths with Move, Horizontal, Vertical and Lineto Commands"},{"location":"svg/08-path/#closing-your-path-with-z","text":"Sometimes you don't want to put in that last Lineto command. You can just use the letter \"z\" to tell it where to go back to the starting point. 1 2 3 4 < svg width = \"100\" height = \"100\" > < path d = \"M 10,10 H 90 V 90 H 10 Z\" fill = \"none\" stroke = \"blue\" stroke-width = \"3\" /> </ svg >","title":"Closing Your Path With \"Z\""},{"location":"svg/08-path/#curve-commands","text":"Now that you have the basics of path commands drawing straight lines, lets have some fun with drawing curves. You can always draw curves with lots and lots of small short lines. But it is very inefficient to send thousands of little drawing commands to the web browser. What if we could just tell the web browser to draw a graceful curve between points? That is where the SVG Path Curve command comes in handy. To create a curve you need to: 1. Define the endpoints - the start and the end of the curve. 2. Supply one or two \"control points\" that govern the general shape of the curve. A B\u00e9zier curve with one control point is called a quadratic B\u00e9zier curve (Q command) and the kind with two control points is called cubic (C command). C - Draw a Cubic B\u00e9zier curve using x1 y1, x2 y2 and x y Q - Draw a Quadradic B\u00e9zier curve using x1 y1, x2 y2 and x y Here is the SVG code that draws a curve from (10,10) through 100,100 and ends at (200, 10). 1 2 3 4 < svg width = \"100\" height = \"100\" > < path d = \"M 10,10 C 20,20 100,100 200,10\" stroke = \"black\" fill = \"transparent\" /> </ svg > Here is what it looks like: Note that there are a few differences. We don't just add the center point of the curve. We also tell the direction to proceed from the origin (in a diagonal line from 10,10 to 20,20) is one additional point. The center point of the curve is 100,100 and the final point is 200,10","title":"Curve commands"},{"location":"svg/08-path/#sawtooth-vs-sine-wave","text":"A sawtooth wave is a wave that has straight lines that go from a minimum to a maximum. 1 2 3 4 5 6 < svg width = \"700\" height = \"110\" > < path d = \"M 0,0 L 100,100 L 200,0 L 300,100 L 400,0 L 500,100 L 600,0 L 700,100 L 800,0\" stroke = \"black\" fill = \"none\" stroke-width = \"3\" /> <!-- This is the axis line --> < path d = \"M 0,50 L 700,50\" fill = \"none\" stroke = \"silver\" stroke-width = \"1\" > </ svg > Here is the same wave using curves:","title":"Sawtooth vs Sine Wave"},{"location":"svg/08-path/#sawtooth-with-quadratic-curve","text":"","title":"Sawtooth with Quadratic Curve"},{"location":"svg/08-path/#sawtooth-with-cubic-curve","text":"TBD get a simple sawtooth with curves: Sample top to bottom: Pull up with magnets:","title":"Sawtooth with Cubic Curve"},{"location":"svg/09-path-curved/","text":"Drawing A Paths with SVG \u00b6 Up until now, the SVG examples we were showing you were all pretty simple. They were not very different from the Turtle Graphics drawings that we generated in Scratch or with our turtle graphics libraries in Python. But now we will start to really show how the SVG standard is really impressive. And this is where SVG paths come in. In SVG, the path operator is considered the most powerful tool in our drawing library! The d attribute is the way that that we pass our drawing data to the path element. But d is really, really smart. It knows how to move to any point in our drawing area and then use relative horizontal and vertical drawing commands from that initial moveto point. Here are the three initial \"commands that we will use: M - move to any X,Y point H - move Horizontally V - move Vertically L - draw a line to a given point (Lineto) Simple Paths with Move, Horizontal, Vertical and Lineto Commands \u00b6 Here is the path element used to draw a simple square 1 2 3 4 < svg width = \"100\" height = \"100\" > < path d = \"M 10,10 H 90 V 90 H 10 L 10,10\" fill = \"none\" stroke = \"blue\" stroke-width = \"3\" /> </ svg > Closing Your Path With \"Z\" \u00b6 Sometimes you don't want to put in that last Lineto command. You can just use the letter \"z\" to tell it where to go back to the starting point. 1 2 3 4 < svg width = \"100\" height = \"100\" > < path d = \"M 10,10 H 90 V 90 H 10 Z\" fill = \"none\" stroke = \"blue\" stroke-width = \"3\" /> </ svg > Curve commands \u00b6 Now that you have the basics of path commands drawing straight lines, lets have some fun with drawing curves. You can always draw curves with lots and lots of small short lines. But it is very inefficient to send thousands of little drawing commands to the web browser. What if we could just tell the web browser to draw a graceful curve between points? That is where the SVG Path Curve command comes in handy. To create a curve you need to: 1. Define the endpoints - the start and the end of the curve. 2. Supply one or two \"control points\" that govern the general shape of the curve. A B\u00e9zier curve with one control point is called a quadratic B\u00e9zier curve (Q command) and the kind with two control points is called cubic (C command). C - Draw a Cubic B\u00e9zier curve using x1 y1, x2 y2 and x y Q - Draw a Quadradic B\u00e9zier curve using x1 y1, x2 y2 and x y Here is the SVG code that draws a curve from (10,10) through 100,100 and ends at (200, 10). 1 2 3 4 < svg width = \"100\" height = \"100\" > < path d = \"M 10,10 C 20,20 100,100 200,10\" stroke = \"black\" fill = \"transparent\" /> </ svg > Here is what it looks like: Note that there are a few differences. We don't just add the center point of the curve. We also tell the direction to proceed from the origin (in a diagonal line from 10,10 to 20,20) is one additional point. The center point of the curve is 100,100 and the final point is 200,10 Codepen SVG Curve Demo Sawtooth vs Sine Wave \u00b6 A sawtooth wave is a wave that has straight lines that go from a minimum to a maximum. 1 2 3 4 5 6 < svg width = \"700\" height = \"110\" > < path d = \"M 0,0 L 100,100 L 200,0 L 300,100 L 400,0 L 500,100 L 600,0 L 700,100 L 800,0\" stroke = \"black\" fill = \"none\" stroke-width = \"3\" /> <!-- This is the axis line --> < path d = \"M 0,50 L 700,50\" fill = \"none\" stroke = \"silver\" stroke-width = \"1\" > </ svg > https://codepen.io/dtab428/pen/OWoWEp Here is the same wave using curves: Sawtooth with Quadratic Curve \u00b6 Sawtooth with Cubic Curve \u00b6 TBD get a simple sawtooth with curves: Sample top to bottom: Pull up with magnets:","title":"Drawing A Paths with SVG"},{"location":"svg/09-path-curved/#drawing-a-paths-with-svg","text":"Up until now, the SVG examples we were showing you were all pretty simple. They were not very different from the Turtle Graphics drawings that we generated in Scratch or with our turtle graphics libraries in Python. But now we will start to really show how the SVG standard is really impressive. And this is where SVG paths come in. In SVG, the path operator is considered the most powerful tool in our drawing library! The d attribute is the way that that we pass our drawing data to the path element. But d is really, really smart. It knows how to move to any point in our drawing area and then use relative horizontal and vertical drawing commands from that initial moveto point. Here are the three initial \"commands that we will use: M - move to any X,Y point H - move Horizontally V - move Vertically L - draw a line to a given point (Lineto)","title":"Drawing A Paths with SVG"},{"location":"svg/09-path-curved/#simple-paths-with-move-horizontal-vertical-and-lineto-commands","text":"Here is the path element used to draw a simple square 1 2 3 4 < svg width = \"100\" height = \"100\" > < path d = \"M 10,10 H 90 V 90 H 10 L 10,10\" fill = \"none\" stroke = \"blue\" stroke-width = \"3\" /> </ svg >","title":"Simple Paths with Move, Horizontal, Vertical and Lineto Commands"},{"location":"svg/09-path-curved/#closing-your-path-with-z","text":"Sometimes you don't want to put in that last Lineto command. You can just use the letter \"z\" to tell it where to go back to the starting point. 1 2 3 4 < svg width = \"100\" height = \"100\" > < path d = \"M 10,10 H 90 V 90 H 10 Z\" fill = \"none\" stroke = \"blue\" stroke-width = \"3\" /> </ svg >","title":"Closing Your Path With \"Z\""},{"location":"svg/09-path-curved/#curve-commands","text":"Now that you have the basics of path commands drawing straight lines, lets have some fun with drawing curves. You can always draw curves with lots and lots of small short lines. But it is very inefficient to send thousands of little drawing commands to the web browser. What if we could just tell the web browser to draw a graceful curve between points? That is where the SVG Path Curve command comes in handy. To create a curve you need to: 1. Define the endpoints - the start and the end of the curve. 2. Supply one or two \"control points\" that govern the general shape of the curve. A B\u00e9zier curve with one control point is called a quadratic B\u00e9zier curve (Q command) and the kind with two control points is called cubic (C command). C - Draw a Cubic B\u00e9zier curve using x1 y1, x2 y2 and x y Q - Draw a Quadradic B\u00e9zier curve using x1 y1, x2 y2 and x y Here is the SVG code that draws a curve from (10,10) through 100,100 and ends at (200, 10). 1 2 3 4 < svg width = \"100\" height = \"100\" > < path d = \"M 10,10 C 20,20 100,100 200,10\" stroke = \"black\" fill = \"transparent\" /> </ svg > Here is what it looks like: Note that there are a few differences. We don't just add the center point of the curve. We also tell the direction to proceed from the origin (in a diagonal line from 10,10 to 20,20) is one additional point. The center point of the curve is 100,100 and the final point is 200,10 Codepen SVG Curve Demo","title":"Curve commands"},{"location":"svg/09-path-curved/#sawtooth-vs-sine-wave","text":"A sawtooth wave is a wave that has straight lines that go from a minimum to a maximum. 1 2 3 4 5 6 < svg width = \"700\" height = \"110\" > < path d = \"M 0,0 L 100,100 L 200,0 L 300,100 L 400,0 L 500,100 L 600,0 L 700,100 L 800,0\" stroke = \"black\" fill = \"none\" stroke-width = \"3\" /> <!-- This is the axis line --> < path d = \"M 0,50 L 700,50\" fill = \"none\" stroke = \"silver\" stroke-width = \"1\" > </ svg > https://codepen.io/dtab428/pen/OWoWEp Here is the same wave using curves:","title":"Sawtooth vs Sine Wave"},{"location":"svg/09-path-curved/#sawtooth-with-quadratic-curve","text":"","title":"Sawtooth with Quadratic Curve"},{"location":"svg/09-path-curved/#sawtooth-with-cubic-curve","text":"TBD get a simple sawtooth with curves: Sample top to bottom: Pull up with magnets:","title":"Sawtooth with Cubic Curve"},{"location":"ux/01-intro/","text":"Introduction to User Experience Design (UX) \u00b6 The goal of this course is to introduce students to the general concepts of user experience design. This class has no prerequsites and does not require any knowledge of programming. It is designed to complement and be taken with the existing CoderDojo courses in HTML, CSS, JavaScript, SVG and Mobile application development. The UX course complements these courses and we attempt to avoid duplication of this content. This course typically takes students between 2-4 hours, depending on their prior experiences. Introduction \u00b6 What is user experience design Objective evaluation of user experience Domains: web, mobile apps, voice User Research \u00b6 How do we evaluate the success of user interfaces? A/B testing. Personas \u00b6 Personas are archetypical users whose goals and characteristics represent the needs of a larger group of users. Information Architecture \u00b6 Wireframing \u00b6 Design Thinking \u00b6 Skteching \u00b6 User Interface Design \u00b6 Web Design \u00b6 Mobile Application Design \u00b6 GPT-3 Outline \u00b6 The following outline was generated by the GPT-3 program: Here is an outline of the topics we will cover in our UX course: Introduction to UX and UI Design User Research & Personas Information Architecture & Wireframing Design Thinking & Sketching User Interface Design (UI) \u2013 Part 1: Visual Design Principles and Basics of User Interface Design (UI) \u2013 Part 2: Advanced User Interface Design (UI) Techniques and Tips for Web and Mobile Apps.","title":"Introduction to User Experience Design (UX)"},{"location":"ux/01-intro/#introduction-to-user-experience-design-ux","text":"The goal of this course is to introduce students to the general concepts of user experience design. This class has no prerequsites and does not require any knowledge of programming. It is designed to complement and be taken with the existing CoderDojo courses in HTML, CSS, JavaScript, SVG and Mobile application development. The UX course complements these courses and we attempt to avoid duplication of this content. This course typically takes students between 2-4 hours, depending on their prior experiences.","title":"Introduction to User Experience Design (UX)"},{"location":"ux/01-intro/#introduction","text":"What is user experience design Objective evaluation of user experience Domains: web, mobile apps, voice","title":"Introduction"},{"location":"ux/01-intro/#user-research","text":"How do we evaluate the success of user interfaces? A/B testing.","title":"User Research"},{"location":"ux/01-intro/#personas","text":"Personas are archetypical users whose goals and characteristics represent the needs of a larger group of users.","title":"Personas"},{"location":"ux/01-intro/#information-architecture","text":"","title":"Information Architecture"},{"location":"ux/01-intro/#wireframing","text":"","title":"Wireframing"},{"location":"ux/01-intro/#design-thinking","text":"","title":"Design Thinking"},{"location":"ux/01-intro/#skteching","text":"","title":"Skteching"},{"location":"ux/01-intro/#user-interface-design","text":"","title":"User Interface Design"},{"location":"ux/01-intro/#web-design","text":"","title":"Web Design"},{"location":"ux/01-intro/#mobile-application-design","text":"","title":"Mobile Application Design"},{"location":"ux/01-intro/#gpt-3-outline","text":"The following outline was generated by the GPT-3 program: Here is an outline of the topics we will cover in our UX course: Introduction to UX and UI Design User Research & Personas Information Architecture & Wireframing Design Thinking & Sketching User Interface Design (UI) \u2013 Part 1: Visual Design Principles and Basics of User Interface Design (UI) \u2013 Part 2: Advanced User Interface Design (UI) Techniques and Tips for Web and Mobile Apps.","title":"GPT-3 Outline"},{"location":"ux/02-what-is-ux/","text":"What is User Experience Design \u00b6 Definition of user experience (UX) Differentiation from User Interface (UI) Applies to both digital (web, mobile, voice) and physical (devices) Definition of User Experience \u00b6","title":"What is User Experience Design"},{"location":"ux/02-what-is-ux/#what-is-user-experience-design","text":"Definition of user experience (UX) Differentiation from User Interface (UI) Applies to both digital (web, mobile, voice) and physical (devices)","title":"What is User Experience Design"},{"location":"ux/02-what-is-ux/#definition-of-user-experience","text":"","title":"Definition of User Experience"},{"location":"ux/03-user-research/","text":"User Research \u00b6 What is user research? Why is user research important? A/B testing? Personas Evaluating the results of user testing GPT-3 \u00b6 GPT-3 Input Parameters \u00b6 Response Length: 200 Temperature: .3 Frequency Penalty: .8 Here is an outline of the topics we will cover in the user research section of our UX course: 1) What is user research? 2) A/B testing? 3) GPT-3 Response \u00b6 How to conduct user research? 4) How to write a user research report? 5) How to create a persona? 6) What is usability testing and how to conduct it? 7) What is heuristic evaluation and how to conduct it?","title":"User Research"},{"location":"ux/03-user-research/#user-research","text":"What is user research? Why is user research important? A/B testing? Personas Evaluating the results of user testing","title":"User Research"},{"location":"ux/03-user-research/#gpt-3","text":"","title":"GPT-3"},{"location":"ux/03-user-research/#gpt-3-input-parameters","text":"Response Length: 200 Temperature: .3 Frequency Penalty: .8 Here is an outline of the topics we will cover in the user research section of our UX course: 1) What is user research? 2) A/B testing? 3)","title":"GPT-3 Input Parameters"},{"location":"ux/03-user-research/#gpt-3-response","text":"How to conduct user research? 4) How to write a user research report? 5) How to create a persona? 6) What is usability testing and how to conduct it? 7) What is heuristic evaluation and how to conduct it?","title":"GPT-3 Response"},{"location":"ux/04-personas/","text":"Personas \u00b6 What are personas? Why do we create personas in UX design? Developing empathy for our users How to create personas? How do we evaluate personas? What are scenarios? Why do we create scenarios in UX design? How to create scenarios? How do we evaluate scenarios? Examples of personas for CoderDojo Personas Definition \u00b6 Personas are archetypical users whose goals and characteristics represent the needs of a larger group of users. Personas are typically are created by creating a single page description of an individual that represents all the users in this class of users. Personas help us define the background, motivations and personality characteristics of a class of users. Why are Personas Important? \u00b6 Deep understanding of a target audience is fundamental to creating exceptional products. Personas help a product team find the answer to one of their most important questions, \u201cWho are we designing for?\u201d By understanding the expectations, concerns and motivations of target users, it\u2019s possible to design a product that will satisfy users needs and therefore be successful. References \u00b6 Nick Babich Blog GPT-3 \u00b6 GPT-3 Input \u00b6 Here is an outline of the topics we will cover in the Personas section of our UX course: 1) What are personas? 2) Why do we create personas in UX design? 3) How to create personas? 4) How do we evaluate personas? 5) GPT-3 Output \u00b6 Here is an outline of the topics we will cover in the Scenarios section of our UX course: 1) What are scenarios? 2) Why do we create scenarios in UX design? 3) How to create scenarios? 4) How do we evaluate scenarios?","title":"Personas"},{"location":"ux/04-personas/#personas","text":"What are personas? Why do we create personas in UX design? Developing empathy for our users How to create personas? How do we evaluate personas? What are scenarios? Why do we create scenarios in UX design? How to create scenarios? How do we evaluate scenarios? Examples of personas for CoderDojo","title":"Personas"},{"location":"ux/04-personas/#personas-definition","text":"Personas are archetypical users whose goals and characteristics represent the needs of a larger group of users. Personas are typically are created by creating a single page description of an individual that represents all the users in this class of users. Personas help us define the background, motivations and personality characteristics of a class of users.","title":"Personas Definition"},{"location":"ux/04-personas/#why-are-personas-important","text":"Deep understanding of a target audience is fundamental to creating exceptional products. Personas help a product team find the answer to one of their most important questions, \u201cWho are we designing for?\u201d By understanding the expectations, concerns and motivations of target users, it\u2019s possible to design a product that will satisfy users needs and therefore be successful.","title":"Why are Personas Important?"},{"location":"ux/04-personas/#references","text":"Nick Babich Blog","title":"References"},{"location":"ux/04-personas/#gpt-3","text":"","title":"GPT-3"},{"location":"ux/04-personas/#gpt-3-input","text":"Here is an outline of the topics we will cover in the Personas section of our UX course: 1) What are personas? 2) Why do we create personas in UX design? 3) How to create personas? 4) How do we evaluate personas? 5)","title":"GPT-3 Input"},{"location":"ux/04-personas/#gpt-3-output","text":"Here is an outline of the topics we will cover in the Scenarios section of our UX course: 1) What are scenarios? 2) Why do we create scenarios in UX design? 3) How to create scenarios? 4) How do we evaluate scenarios?","title":"GPT-3 Output"},{"location":"ux/05-information-architecture/","text":"Information Architecture \u00b6 What is Information Architecture \u00b6 GPT-3 \u00b6 GPT-3 Prompt \u00b6 Here is an outline of the topics we will cover in the information architecture section of our UX course: 1) What is information architecture? 2) Why is it important in UX design? 3) GPT-3 Response \u00b6 1) What is information architecture? 2) Why is it important in UX design? 3) What are the different types of information architecture? 4) How to create a site map? 5) What is the difference between site map and wireframe? 8) How to create an information architecture strategy? 9) What are the different IA patterns? 10) What is a card sorting exercise? 11) How to conduct card sorting exercise?","title":"Information Architecture"},{"location":"ux/05-information-architecture/#information-architecture","text":"","title":"Information Architecture"},{"location":"ux/05-information-architecture/#what-is-information-architecture","text":"","title":"What is Information Architecture"},{"location":"ux/05-information-architecture/#gpt-3","text":"","title":"GPT-3"},{"location":"ux/05-information-architecture/#gpt-3-prompt","text":"Here is an outline of the topics we will cover in the information architecture section of our UX course: 1) What is information architecture? 2) Why is it important in UX design? 3)","title":"GPT-3 Prompt"},{"location":"ux/05-information-architecture/#gpt-3-response","text":"1) What is information architecture? 2) Why is it important in UX design? 3) What are the different types of information architecture? 4) How to create a site map? 5) What is the difference between site map and wireframe? 8) How to create an information architecture strategy? 9) What are the different IA patterns? 10) What is a card sorting exercise? 11) How to conduct card sorting exercise?","title":"GPT-3 Response"},{"location":"ux/06-wireframing/","text":"","title":"06 wireframing"},{"location":"ux/07-design-thinking/","text":"","title":"07 design thinking"},{"location":"ux/08-sketching/","text":"","title":"08 sketching"},{"location":"ux/09-user-interface-design/","text":"","title":"09 user interface design"},{"location":"ux/10-web-design/","text":"","title":"10 web design"},{"location":"ux/11-mobile-design/","text":"","title":"11 mobile design"},{"location":"ux/12-voice-design/","text":"Voice Design \u00b6 Natural Language Processing Intent detection Smart speakers Automated voice response units Example: Alexa skills Example: Raspberry Pi Example: NVIDIA Nano Example: Google Voice","title":"Voice Design"},{"location":"ux/12-voice-design/#voice-design","text":"Natural Language Processing Intent detection Smart speakers Automated voice response units Example: Alexa skills Example: Raspberry Pi Example: NVIDIA Nano Example: Google Voice","title":"Voice Design"}]}