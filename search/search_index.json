{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CoderDojo Twin Cities Web and User Experience Resources Welcome to the Web/User Experience repository for teachers and mentors. We are developing our own Introduction to HTML courses on this site and we also have links to other resources for your students.","title":"Home"},{"location":"#coderdojo-twin-cities-web-and-user-experience-resources","text":"Welcome to the Web/User Experience repository for teachers and mentors. We are developing our own Introduction to HTML courses on this site and we also have links to other resources for your students.","title":"CoderDojo Twin Cities Web and User Experience Resources"},{"location":"contact/","text":"Contacts General Code Savvy Contact kidscode@codesavvy.org Specific questions on this repository Dan McCreary Dan.McCreary@gmail.com","title":"Contact"},{"location":"contact/#contacts","text":"","title":"Contacts"},{"location":"contact/#general-code-savvy-contact","text":"kidscode@codesavvy.org","title":"General Code Savvy Contact"},{"location":"contact/#specific-questions-on-this-repository","text":"Dan McCreary Dan.McCreary@gmail.com","title":"Specific questions on this repository"},{"location":"leaning-objectives/","text":"Web-UX Learning Objectives Target audience A typical 10-12 year old student that wants to learn how to create their own web pages. Typical Sessions Three one-hour sessions Sample HTML Topics Introduction to HTML Markup - begin and end tags HTML file structure - html, head and body Bold, italic and underline Adding hypertext links Images Lists: unordered and ordered Tables: rows and columns Description lists Code Block quotes Inline quotes Subscripts and superscripts HTML colors: font, and background color Comments Sample CSS Topics Why use CSS CSS syntax Changing default behavior: font Adding class attributes to HTML elements CSS Selectors Location styling Styling based on state: hover and visited Combining selectors External vs. Inline CSS Inline styles At rules Shorthands Comments White space Borders Using borders to debug layouts Resources for learning Web CodePen JSFiddle","title":"Learning Objectives"},{"location":"leaning-objectives/#web-ux-learning-objectives","text":"","title":"Web-UX Learning Objectives"},{"location":"leaning-objectives/#target-audience","text":"A typical 10-12 year old student that wants to learn how to create their own web pages.","title":"Target audience"},{"location":"leaning-objectives/#typical-sessions","text":"Three one-hour sessions","title":"Typical Sessions"},{"location":"leaning-objectives/#sample-html-topics","text":"Introduction to HTML Markup - begin and end tags HTML file structure - html, head and body Bold, italic and underline Adding hypertext links Images Lists: unordered and ordered Tables: rows and columns Description lists Code Block quotes Inline quotes Subscripts and superscripts HTML colors: font, and background color Comments","title":"Sample HTML Topics"},{"location":"leaning-objectives/#sample-css-topics","text":"Why use CSS CSS syntax Changing default behavior: font Adding class attributes to HTML elements CSS Selectors Location styling Styling based on state: hover and visited Combining selectors External vs. Inline CSS Inline styles At rules Shorthands Comments White space Borders Using borders to debug layouts","title":"Sample CSS Topics"},{"location":"leaning-objectives/#resources-for-learning-web","text":"CodePen JSFiddle","title":"Resources for learning Web"},{"location":"resources/","text":"Web Resources Here are some resources for teaching web and UX concepts. Mozilla course materials: Mozilla Getting Started with HTML Mozilla Getting Started with CSS Mozilla Getting Started with Javascript GitHub GitHub's Introduction to HTML Pluralsight Teaching Kids HTML Pluralsight This link is to a set of many short videos on teaching HTML to kids. Very well produced. There may be some fees for accessing this content.","title":"Resources"},{"location":"resources/#web-resources","text":"Here are some resources for teaching web and UX concepts.","title":"Web Resources"},{"location":"resources/#mozilla-course-materials","text":"Mozilla Getting Started with HTML Mozilla Getting Started with CSS Mozilla Getting Started with Javascript","title":"Mozilla course materials:"},{"location":"resources/#github","text":"GitHub's Introduction to HTML","title":"GitHub"},{"location":"resources/#pluralsight","text":"Teaching Kids HTML Pluralsight This link is to a set of many short videos on teaching HTML to kids. Very well produced. There may be some fees for accessing this content.","title":"Pluralsight"},{"location":"intro-to-html/01-intro/","text":"Introduction to HTML This course is about the web's hypertext markup language - HTML. There have been many other markup languages before the web, but HTML was one of the first popular markup languages one to allow pages from one computer the ability to link to pages on any another computer it the world. HTML became the foundation of the world wide web. Here are the topics we will cover in this course: Elements and attributes - How we create HTML pages using data formats called elements and attributes. HTML file structure - How the highest level elements in a web page work together. HTML headings - How we create headings in a web page such as Chapter or Section headings and titles. Bold and italics (as well as superscript and subscripts) - how we make inline text have a different formatting style Lists - How we create unorder bullet lists and ordered numbered lists Images - How we add images into a web page Links - How we add hypertext links to a web page Tables - How we add tables to change the layout of columns of text or data tables Forms - How we create forms that have a variety of input fields such as test and selection lists Elements and Attributes HTML uses a markup language that allows you to use tags GitHub https://lab.github.com/githubtraining/introduction-to-html","title":"Introduction"},{"location":"intro-to-html/01-intro/#introduction-to-html","text":"This course is about the web's hypertext markup language - HTML. There have been many other markup languages before the web, but HTML was one of the first popular markup languages one to allow pages from one computer the ability to link to pages on any another computer it the world. HTML became the foundation of the world wide web. Here are the topics we will cover in this course: Elements and attributes - How we create HTML pages using data formats called elements and attributes. HTML file structure - How the highest level elements in a web page work together. HTML headings - How we create headings in a web page such as Chapter or Section headings and titles. Bold and italics (as well as superscript and subscripts) - how we make inline text have a different formatting style Lists - How we create unorder bullet lists and ordered numbered lists Images - How we add images into a web page Links - How we add hypertext links to a web page Tables - How we add tables to change the layout of columns of text or data tables Forms - How we create forms that have a variety of input fields such as test and selection lists","title":"Introduction to HTML"},{"location":"intro-to-html/01-intro/#elements-and-attributes","text":"HTML uses a markup language that allows you to use tags","title":"Elements and Attributes"},{"location":"intro-to-html/01-intro/#github","text":"https://lab.github.com/githubtraining/introduction-to-html","title":"GitHub"},{"location":"intro-to-html/01a-elements-and-attributes/","text":"Elements and Attributes HTML is composed of a tree-structure of things called \"elements\". Just like a tree, HTML files have a single root (think of a trunk), many branch elements that contain other elements, and finally leaves of the tree that contain the text that we display on a page. Elements are usually composed of pairs of tags - begin tags and end tags. Here are the main parts of an element: The begin tag is the start of the element. It always starts with a \"less then\" character and ends with a \"greater than\" character. The begin tag can have many attributes which are name-value pairs The name-value pairs are composed of attribute names, followed by an equal sign, followed by the attribute values surrounded by double quotes The begin and end tags surround the element text. This is usually the leaf element or other branch elements The element text is followed by an end tag. Note that the end tag has the same characters as a begin tag but it also has a forwad slash after the less-than character. What is difficult to understand is that elements can contain other elements which in turn can contain other elements. Here is an example of this tree structure: <root> <branch> <branch> <branch>This is the leaf text.</branch> </branch> </branch> <root> It is also interesting to note that it does not matter where you put newlines (carriage returns) between the branch elements. HTML will render the same within the browser. The following is the same as the markup above: <root><branch><branch> <branch>This is the leaf text.</branch> </branch></branch><root> If you are new to markup languages, this terminology of \"elements\" and \"attributes\" and the rules will seem a bit odd at first. However, as you begin to use it you will learn to appreciate how allowing us to be flexible with the way spaces are used when we create the HTML files to be convenient. It allows us to use consistent rules for how to display the test on a web page. Empty Elements There are some places in an HTML file where the contents of the element is empty. For these elements there is no end element and you add a forward slash before the greater then. Examples of empty elements: <br/> <!-- newline break --> <img src=\"myimage.jpg\"/> <!-- image with no text value --> <input type=\"text\" id=\"firstName\" name=\"firstName\"/> <!-- input field -->","title":"Elements and Attributes"},{"location":"intro-to-html/01a-elements-and-attributes/#elements-and-attributes","text":"HTML is composed of a tree-structure of things called \"elements\". Just like a tree, HTML files have a single root (think of a trunk), many branch elements that contain other elements, and finally leaves of the tree that contain the text that we display on a page. Elements are usually composed of pairs of tags - begin tags and end tags. Here are the main parts of an element: The begin tag is the start of the element. It always starts with a \"less then\" character and ends with a \"greater than\" character. The begin tag can have many attributes which are name-value pairs The name-value pairs are composed of attribute names, followed by an equal sign, followed by the attribute values surrounded by double quotes The begin and end tags surround the element text. This is usually the leaf element or other branch elements The element text is followed by an end tag. Note that the end tag has the same characters as a begin tag but it also has a forwad slash after the less-than character. What is difficult to understand is that elements can contain other elements which in turn can contain other elements. Here is an example of this tree structure: <root> <branch> <branch> <branch>This is the leaf text.</branch> </branch> </branch> <root> It is also interesting to note that it does not matter where you put newlines (carriage returns) between the branch elements. HTML will render the same within the browser. The following is the same as the markup above: <root><branch><branch> <branch>This is the leaf text.</branch> </branch></branch><root> If you are new to markup languages, this terminology of \"elements\" and \"attributes\" and the rules will seem a bit odd at first. However, as you begin to use it you will learn to appreciate how allowing us to be flexible with the way spaces are used when we create the HTML files to be convenient. It allows us to use consistent rules for how to display the test on a web page.","title":"Elements and Attributes"},{"location":"intro-to-html/01a-elements-and-attributes/#empty-elements","text":"There are some places in an HTML file where the contents of the element is empty. For these elements there is no end element and you add a forward slash before the greater then. Examples of empty elements: <br/> <!-- newline break --> <img src=\"myimage.jpg\"/> <!-- image with no text value --> <input type=\"text\" id=\"firstName\" name=\"firstName\"/> <!-- input field -->","title":"Empty Elements"},{"location":"intro-to-html/02-html-structure/","text":"HTML File Structure HTML files all have a consistent structure of elements and attributes. In this lab we will take a look at this structure and see how the elements work together to describe the way a web page is laid out and rendered. Getting Started Template Here is a standard template we will be using for our example programs. <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"/> <title>A simple HTML document</title> </head> <body> <p>Hello World!<p> </body> </html> DOCTYPE There are many varieties and versions of HTML files. This line indicates that this file conforms to the most common modern format: HTML 5. html This is the root element. The begin tag should be the second line of the file and the end tag the last line of the file. The html element contains two parts. The first is the head that hold the title and data about the content and the body has the page content itself. The lang=\"en\" tells web crawlers that the language of this web page is English. head The head element contains information about the page content. This includes the page title that appears on the browser tab. It is a good best practice to pick a short but descriptive page title. The <meta charset=\"utf-8\"/> element indicates that the encoding character set is UTF-8. This is the preferred format for encoding web pages. body The body element contains the page content itself. The elements within the body elements hold the structure of the web page and the text that is rendered within each element. Block and Inline Elements The body element contains two types of elements: Block elements always starts on a new line and takes up the full width available. Block elements stretch out to the left and right as far as the layout permits. Block elements are used to arrange large regions of page layout. Inline elements do not start on a new line and it only take up as much width as necessary. They are frequently used to change the way individual words are displayed within text blocks. For example you can use an inline element to change the font or color of a few words within a line of text. One of the tricky things about learning HTML layout is to understand the rules of how block and inline elements work together.","title":"HTML File Structure"},{"location":"intro-to-html/02-html-structure/#html-file-structure","text":"HTML files all have a consistent structure of elements and attributes. In this lab we will take a look at this structure and see how the elements work together to describe the way a web page is laid out and rendered.","title":"HTML File Structure"},{"location":"intro-to-html/02-html-structure/#getting-started-template","text":"Here is a standard template we will be using for our example programs. <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"/> <title>A simple HTML document</title> </head> <body> <p>Hello World!<p> </body> </html>","title":"Getting Started Template"},{"location":"intro-to-html/02-html-structure/#doctype","text":"There are many varieties and versions of HTML files. This line indicates that this file conforms to the most common modern format: HTML 5.","title":"DOCTYPE"},{"location":"intro-to-html/02-html-structure/#html","text":"This is the root element. The begin tag should be the second line of the file and the end tag the last line of the file. The html element contains two parts. The first is the head that hold the title and data about the content and the body has the page content itself. The lang=\"en\" tells web crawlers that the language of this web page is English.","title":"html"},{"location":"intro-to-html/02-html-structure/#head","text":"The head element contains information about the page content. This includes the page title that appears on the browser tab. It is a good best practice to pick a short but descriptive page title. The <meta charset=\"utf-8\"/> element indicates that the encoding character set is UTF-8. This is the preferred format for encoding web pages.","title":"head"},{"location":"intro-to-html/02-html-structure/#body","text":"The body element contains the page content itself. The elements within the body elements hold the structure of the web page and the text that is rendered within each element.","title":"body"},{"location":"intro-to-html/02-html-structure/#block-and-inline-elements","text":"The body element contains two types of elements: Block elements always starts on a new line and takes up the full width available. Block elements stretch out to the left and right as far as the layout permits. Block elements are used to arrange large regions of page layout. Inline elements do not start on a new line and it only take up as much width as necessary. They are frequently used to change the way individual words are displayed within text blocks. For example you can use an inline element to change the font or color of a few words within a line of text. One of the tricky things about learning HTML layout is to understand the rules of how block and inline elements work together.","title":"Block and Inline Elements"},{"location":"intro-to-html/03-headings/","text":"HTML Headings HTML headings appear in the body element. They have different levels and get smaller in font as you increase the heading level. Sometimes the first level heading <h1> is use as the title of the document. If you have a large document then <h2> might be the chapter headings and <h3/> might be the chapter sections. <h1>Article Title</h1> <h2>Chapter Heading</h2> <h3>Chapter Section</h3> <h4>Chapter Subsection</h4> <h5>Chapter Sub-Subsection</h5> Here is how these would render: Article Title Chapter Heading Chapter Section Chapter Subsection Chapter Sub-Subsection Note that by default, headings always appear on their own line. However, you can use CSS to change the font size, font color, spacing around the headers and add border and color to the background of a header.","title":"Headings"},{"location":"intro-to-html/03-headings/#html-headings","text":"HTML headings appear in the body element. They have different levels and get smaller in font as you increase the heading level. Sometimes the first level heading <h1> is use as the title of the document. If you have a large document then <h2> might be the chapter headings and <h3/> might be the chapter sections. <h1>Article Title</h1> <h2>Chapter Heading</h2> <h3>Chapter Section</h3> <h4>Chapter Subsection</h4> <h5>Chapter Sub-Subsection</h5> Here is how these would render:","title":"HTML Headings"},{"location":"intro-to-html/04-bold-and-italic/","text":"Adding Bold and Italic to HTML HTML allows us to add bold and italic to any text in a document. To do this we need to wrap the text in <b> elements for bold and <i> elements for italics. Here is an example of adding bold and italic to a paragraph of text. <p>HTML allows us to add <b>bold</b> to any text that we want to <b>emphasize.</b>. We can also add <i>italic</i> text or a combination of both<b><i>bold and italic</i></b>. </p> Which will render like this: HTML allows us to add bold to any text that we want to emphasize. . We can also add italic text or a combination of both bold and italic elements turned on. !!! Warning You must remember to close the bold and italic markup. They don't just apply to a single world. Make sure you close the elements in the reverse order that you added them. Other Inline Elements There are two other interesting inline elements that you might want to use. One is for creating superscripts and one is for subscripts. Superscripts To make text appear shifted up we use the <sub> tag. Here we use it in a mathematical formula to show an exponent: <p>y = x<sup>2</sup> + 2x + 1<p> which will render: y = x 2 + 2x + 1 You can also use some greek letters if you know how to encode them. Here the greek letter \"pi\" is references using &pi; <p>The formula:<br/> e<sup>i&pi;</sup>= -1<br/> is one of the most elegent formulas in mathematics </p> The formula: e i\u03c0 = -1 is one of the most elegent formulas in mathematics Subscripts <p>The chemical formula for water is H<sub>2</sub>O </p> The chemical formula for water is H 2 O <p>The chemical formula for caffeine is C<sub>8</sub>H<sub>10</sub>N<sub>4</sub>O<sub>2</sub> </p> The chemical formula for caffeine is C 8 H 10 N 4 O 2","title":"Bold and Italic"},{"location":"intro-to-html/04-bold-and-italic/#adding-bold-and-italic-to-html","text":"HTML allows us to add bold and italic to any text in a document. To do this we need to wrap the text in <b> elements for bold and <i> elements for italics. Here is an example of adding bold and italic to a paragraph of text. <p>HTML allows us to add <b>bold</b> to any text that we want to <b>emphasize.</b>. We can also add <i>italic</i> text or a combination of both<b><i>bold and italic</i></b>. </p> Which will render like this: HTML allows us to add bold to any text that we want to emphasize. . We can also add italic text or a combination of both bold and italic elements turned on. !!! Warning You must remember to close the bold and italic markup. They don't just apply to a single world. Make sure you close the elements in the reverse order that you added them.","title":"Adding Bold and Italic to HTML"},{"location":"intro-to-html/04-bold-and-italic/#other-inline-elements","text":"There are two other interesting inline elements that you might want to use. One is for creating superscripts and one is for subscripts.","title":"Other Inline Elements"},{"location":"intro-to-html/04-bold-and-italic/#superscripts","text":"To make text appear shifted up we use the <sub> tag. Here we use it in a mathematical formula to show an exponent: <p>y = x<sup>2</sup> + 2x + 1<p> which will render: y = x 2 + 2x + 1 You can also use some greek letters if you know how to encode them. Here the greek letter \"pi\" is references using &pi; <p>The formula:<br/> e<sup>i&pi;</sup>= -1<br/> is one of the most elegent formulas in mathematics </p> The formula: e i\u03c0 = -1 is one of the most elegent formulas in mathematics","title":"Superscripts"},{"location":"intro-to-html/04-bold-and-italic/#subscripts","text":"<p>The chemical formula for water is H<sub>2</sub>O </p> The chemical formula for water is H 2 O <p>The chemical formula for caffeine is C<sub>8</sub>H<sub>10</sub>N<sub>4</sub>O<sub>2</sub> </p> The chemical formula for caffeine is C 8 H 10 N 4 O 2","title":"Subscripts"},{"location":"intro-to-html/05-lists/","text":"HTML Lists HTML has several types of lists: Unorder lists Ordered Lists Definition Lists Unordered Lists This is just a simple list with markers called \"bullets\" at the front of every new list item. We used the <ul> tag to start an unordered list and we use the <li> tag to specify each list item. <ul> <li>Apples</li> <li>Bananas</li> <li>Pears</li> </ul> Apples Bananas Pears Ordered lists Apples Bananas Pears ``` Apples Bananas Pears Definition lists These are lists that have a definition title ( <dt> ) at the front of each item. The item then has a definition description <dd> right after the title. Each item can have it's own distinct label. Definition lists are ideal for creating a dictionary list where the label is the term and the description is the definition of the word. Here is an example of a definition list. Engage Where we introdce our topic and any backround motivation. Elicit Where we ask the students what their prior knowledge and how it might be related to the new topic. Explore Where students get a chance to interact with the elements and try out some sample code. Explain Where we explain what each component does. Elaborate Where we dive into the details of how the components interact. Extend Where we ask students to extend the example code. Evaluate Where we check if the students compenhend the lesson","title":"Lists"},{"location":"intro-to-html/05-lists/#html-lists","text":"HTML has several types of lists: Unorder lists Ordered Lists Definition Lists","title":"HTML Lists"},{"location":"intro-to-html/05-lists/#unordered-lists","text":"This is just a simple list with markers called \"bullets\" at the front of every new list item. We used the <ul> tag to start an unordered list and we use the <li> tag to specify each list item. <ul> <li>Apples</li> <li>Bananas</li> <li>Pears</li> </ul> Apples Bananas Pears","title":"Unordered Lists"},{"location":"intro-to-html/05-lists/#ordered-lists","text":"Apples Bananas Pears ``` Apples Bananas Pears","title":"Ordered lists"},{"location":"intro-to-html/05-lists/#definition-lists","text":"These are lists that have a definition title ( <dt> ) at the front of each item. The item then has a definition description <dd> right after the title. Each item can have it's own distinct label. Definition lists are ideal for creating a dictionary list where the label is the term and the description is the definition of the word. Here is an example of a definition list. Engage Where we introdce our topic and any backround motivation. Elicit Where we ask the students what their prior knowledge and how it might be related to the new topic. Explore Where students get a chance to interact with the elements and try out some sample code. Explain Where we explain what each component does. Elaborate Where we dive into the details of how the components interact. Extend Where we ask students to extend the example code. Evaluate Where we check if the students compenhend the lesson","title":"Definition lists"},{"location":"intro-to-html/06-images/","text":"HTML Images We use the <img> element to place images into a web page. The src attribute must have a path to the image on your web server. The src element is the only required element, but it is a best practice to also include an alternate description of the image for people with vision disabilities can use also use the web page. <img src=\"img/earth.jpg\" alt=\"Photo of earth from space\"/> Changing the Image Size You can also add a width and a height to control the horizontal (x) and the vertical (y) dimensions of an image. In this example, we will shrink the image down to 50X50 pixels: <img src=\"img/earth.jpg\" alt=\"Photo of earth from space\" width=\"100\" height=\"100\"/> Relative vs Absolute Paths There are two ways to reference an image. Both methods have pros and cons. If you are deploying a single web site that you want consistent behavior, it is best to include all the images in your own web site and then use a relative path to the images. If you want to share images between multiple areas of the web site they should be place in a common folder, typically named the img folder. Relative paths start with that folder name. The alternative is to directly reference images on the web using a full URL that starts with http:// . This has the advantage of being portable as long as that the path to the image does not change. However, you sometimes can't guantee that a remote web site will not move images around or change their file names. So to be fully in control of your image references, use a relative path. Best Practice for Fast Web Page Loading You also want to be aware of the size of your images. For most web pages, a size of around 10K for small images is fine. Most cameras today store images in large files of several megabytes. Make sure you use a tool to reduce the size of these images before you add them to your web page.","title":"Images"},{"location":"intro-to-html/06-images/#html-images","text":"We use the <img> element to place images into a web page. The src attribute must have a path to the image on your web server. The src element is the only required element, but it is a best practice to also include an alternate description of the image for people with vision disabilities can use also use the web page. <img src=\"img/earth.jpg\" alt=\"Photo of earth from space\"/>","title":"HTML Images"},{"location":"intro-to-html/06-images/#changing-the-image-size","text":"You can also add a width and a height to control the horizontal (x) and the vertical (y) dimensions of an image. In this example, we will shrink the image down to 50X50 pixels: <img src=\"img/earth.jpg\" alt=\"Photo of earth from space\" width=\"100\" height=\"100\"/>","title":"Changing the Image Size"},{"location":"intro-to-html/06-images/#relative-vs-absolute-paths","text":"There are two ways to reference an image. Both methods have pros and cons. If you are deploying a single web site that you want consistent behavior, it is best to include all the images in your own web site and then use a relative path to the images. If you want to share images between multiple areas of the web site they should be place in a common folder, typically named the img folder. Relative paths start with that folder name. The alternative is to directly reference images on the web using a full URL that starts with http:// . This has the advantage of being portable as long as that the path to the image does not change. However, you sometimes can't guantee that a remote web site will not move images around or change their file names. So to be fully in control of your image references, use a relative path.","title":"Relative vs Absolute Paths"},{"location":"intro-to-html/06-images/#best-practice-for-fast-web-page-loading","text":"You also want to be aware of the size of your images. For most web pages, a size of around 10K for small images is fine. Most cameras today store images in large files of several megabytes. Make sure you use a tool to reduce the size of these images before you add them to your web page.","title":"Best Practice for Fast Web Page Loading"},{"location":"intro-to-html/07-links/","text":"HTML Links HTML links are created using the HTML anchor element <a/> . The anchor has an attribute with the name of href that is used to hold the URL of the page to go to when the link is clicked. Here is an example: <a href=\"http://example.com/mypage.html\">Link to mypage</a> You can use the HTML anchor tag to make many elements clickable, not just text. So you can put images and buttons inside the content of the anchor element. Linking to Images The anchor tag allows you to got to another web page if you click on a image. Here is the format of using a clickable image: <a href=\"https://www.coderdojotc.org/web-ux/intro-to-html/img/earth.jpg\"> <img src=\"https://www.coderdojotc.org/web-ux/intro-to-html/img/earth.jpg\" alt=\"Photo of earth from space\" width=\"100\" height=\"100\"/> </a> Try clicking on this image:","title":"Links"},{"location":"intro-to-html/07-links/#html-links","text":"HTML links are created using the HTML anchor element <a/> . The anchor has an attribute with the name of href that is used to hold the URL of the page to go to when the link is clicked. Here is an example: <a href=\"http://example.com/mypage.html\">Link to mypage</a> You can use the HTML anchor tag to make many elements clickable, not just text. So you can put images and buttons inside the content of the anchor element.","title":"HTML Links"},{"location":"intro-to-html/07-links/#linking-to-images","text":"The anchor tag allows you to got to another web page if you click on a image. Here is the format of using a clickable image: <a href=\"https://www.coderdojotc.org/web-ux/intro-to-html/img/earth.jpg\"> <img src=\"https://www.coderdojotc.org/web-ux/intro-to-html/img/earth.jpg\" alt=\"Photo of earth from space\" width=\"100\" height=\"100\"/> </a> Try clicking on this image:","title":"Linking to Images"},{"location":"intro-to-html/08-tables/","text":"HTML Tables Tables allow us to place content in regular rows and columns within a region of a page. Tables can be used to place text into two columns to make it easer to read, but they can also be used to create complex displays of reports that include header descriptions and footer totals. We will start with a simple description of a table and then build a more detailed example. Creating a Simple Table: Two Column Layout Here is a simple example of using a table to place text into two vertical columns. We will use both a <tr> element for a table row and a <td> element for the table data. <table> <tr> <td>This text will be placed into the left column 1</td> <td>This text will be placed into the right column 2</td> </td> </table> Here is how this table will render on a web page: This text will be placed into the left column 1 This text will be placed into the right column 2 A Table with Header and Footer elements <table> <thead> <tr> <th>Month</th> <th>Mentors</th> <th>Students</th> </tr> </thead> <tbody> <tr> <td>January</td> <td>4</td> <td>12</td> </tr> <tr> <td>February</td> <td>5</td> <td>15</td> </tr> </tbody> <tfoot> <tr> <td>March</td> <td>6</td> <td>24</td> </tr> </tfoot> </table> Month Mentors Students January 4 12 February 5 15 March 6 24","title":"Tables"},{"location":"intro-to-html/08-tables/#html-tables","text":"Tables allow us to place content in regular rows and columns within a region of a page. Tables can be used to place text into two columns to make it easer to read, but they can also be used to create complex displays of reports that include header descriptions and footer totals. We will start with a simple description of a table and then build a more detailed example.","title":"HTML Tables"},{"location":"intro-to-html/08-tables/#creating-a-simple-table-two-column-layout","text":"Here is a simple example of using a table to place text into two vertical columns. We will use both a <tr> element for a table row and a <td> element for the table data. <table> <tr> <td>This text will be placed into the left column 1</td> <td>This text will be placed into the right column 2</td> </td> </table> Here is how this table will render on a web page: This text will be placed into the left column 1 This text will be placed into the right column 2","title":"Creating a Simple Table: Two Column Layout"},{"location":"intro-to-html/08-tables/#a-table-with-header-and-footer-elements","text":"<table> <thead> <tr> <th>Month</th> <th>Mentors</th> <th>Students</th> </tr> </thead> <tbody> <tr> <td>January</td> <td>4</td> <td>12</td> </tr> <tr> <td>February</td> <td>5</td> <td>15</td> </tr> </tbody> <tfoot> <tr> <td>March</td> <td>6</td> <td>24</td> </tr> </tfoot> </table> Month Mentors Students January 4 12 February 5 15 March 6 24","title":"A Table with Header and Footer elements"},{"location":"intro-to-html/09-forms/","text":"HTML Forms In this lab we will learn to create HTML forms that allow us to gather different types of input from users and send the users information to a file or a database. Form Structure Form all have the following structure: <form action=\"/http-put-service\"> <label> <input> <label> <input> <label> <input> <input type=\"submit\" value=\"Submit\"> </form> The action attribute is the place where the form data is sent. Usually HTML forms send their data via an HTTP POST function. The submit input just before the form close tag is the button that the user presses. All the rest of the form consists of labels and inputs in pairs. Sometimes the labels and input pairs are on the same line, and sometimes they are each on their own line. In some inputs such as checkboxs and radio button the label occurs before the input. You can use CSS to determine how your form is styled. Here are the different types of input fields: Input fields - a single line of input Selection lists - where a user must select from one or more item of a fixed list Text Areas - larger blocks of multi-line text input area Checkboxes - check boxes where a user can check many items in a list Radio Buttons - a variation of selection lists were all values are visible Input Fields <label for=\"fname\">First name:</label> <input type=\"text\" id=\"firstName\" name=\"firstName\"/> <label for=\"fname\">Last name:</label> <input type=\"text\" id=\"firstName\" name=\"firstName\"/> <input type=\"submit\" value=\"Submit\"> First name: Last name: Selection List <label for=\"language\">Select your language:</label> <select name=\"language\" id=\"language\"> <option value=\"python\">Python</option> <option value=\"c\">C</option> <option value=\"java\">Java</option> <option value=\"kotlin\">Kotlin</option> </select> Select your language: Python C Java Kotlin Textarea <label for=\"notes\">Enter your notes here</label><br/> <textarea id=\"notes\" name=\"notes\" rows=\"4\" cols=\"50\"> Enter your notes here. </textarea> Enter your notes here Enter your notes here. Checkboxes We use checkboxes when we have a list of items and each item can have a true or a false value. <p>What programming languages do you know?</p> <label for=\"python\">Python</label> <input type=\"checkbox\" id=\"python\" name=\"python\"/><br/> <label for=\"c\">C</label> <input type=\"checkbox\" id=\"c\" name=\"c\"/><br/> <label for=\"java\">Java</label> <input type=\"checkbox\" id=\"java\" name=\"java\"/><br/> What programming languages do you know? (check all that apply) Python C Java Radio Buttons Radio buttons are very similar to the selection list in that only one item is selected at a time. <p>What is your favorite language? (select only one item)</p> <input type=\"radio\" id=\"python\" name=\"python\"/> <label for=\"python\">Python</label> <br/> <input type=\"radio\" id=\"c\" name=\"c\"/> <label for=\"c\">C</label> <br/> <input type=\"radio\" id=\"java\" name=\"java\"/> <label for=\"java\">Java</label> <br/> What is your favorite language? (select only one item) Python C Java Gender } label=\"Female\" /> } label=\"Male\" /> } label=\"Other\" /> } label=\"(Disabled option)\" />","title":"Forms"},{"location":"intro-to-html/09-forms/#html-forms","text":"In this lab we will learn to create HTML forms that allow us to gather different types of input from users and send the users information to a file or a database.","title":"HTML Forms"},{"location":"intro-to-html/09-forms/#form-structure","text":"Form all have the following structure: <form action=\"/http-put-service\"> <label> <input> <label> <input> <label> <input> <input type=\"submit\" value=\"Submit\"> </form> The action attribute is the place where the form data is sent. Usually HTML forms send their data via an HTTP POST function. The submit input just before the form close tag is the button that the user presses. All the rest of the form consists of labels and inputs in pairs. Sometimes the labels and input pairs are on the same line, and sometimes they are each on their own line. In some inputs such as checkboxs and radio button the label occurs before the input. You can use CSS to determine how your form is styled. Here are the different types of input fields: Input fields - a single line of input Selection lists - where a user must select from one or more item of a fixed list Text Areas - larger blocks of multi-line text input area Checkboxes - check boxes where a user can check many items in a list Radio Buttons - a variation of selection lists were all values are visible","title":"Form Structure"},{"location":"intro-to-html/09-forms/#input-fields","text":"<label for=\"fname\">First name:</label> <input type=\"text\" id=\"firstName\" name=\"firstName\"/> <label for=\"fname\">Last name:</label> <input type=\"text\" id=\"firstName\" name=\"firstName\"/> <input type=\"submit\" value=\"Submit\"> First name: Last name:","title":"Input Fields"},{"location":"intro-to-html/09-forms/#selection-list","text":"<label for=\"language\">Select your language:</label> <select name=\"language\" id=\"language\"> <option value=\"python\">Python</option> <option value=\"c\">C</option> <option value=\"java\">Java</option> <option value=\"kotlin\">Kotlin</option> </select> Select your language: Python C Java Kotlin","title":"Selection List"},{"location":"intro-to-html/09-forms/#textarea","text":"<label for=\"notes\">Enter your notes here</label><br/> <textarea id=\"notes\" name=\"notes\" rows=\"4\" cols=\"50\"> Enter your notes here. </textarea> Enter your notes here Enter your notes here.","title":"Textarea"},{"location":"intro-to-html/09-forms/#checkboxes","text":"We use checkboxes when we have a list of items and each item can have a true or a false value. <p>What programming languages do you know?</p> <label for=\"python\">Python</label> <input type=\"checkbox\" id=\"python\" name=\"python\"/><br/> <label for=\"c\">C</label> <input type=\"checkbox\" id=\"c\" name=\"c\"/><br/> <label for=\"java\">Java</label> <input type=\"checkbox\" id=\"java\" name=\"java\"/><br/> What programming languages do you know? (check all that apply) Python C Java","title":"Checkboxes"},{"location":"intro-to-html/09-forms/#radio-buttons","text":"Radio buttons are very similar to the selection list in that only one item is selected at a time. <p>What is your favorite language? (select only one item)</p> <input type=\"radio\" id=\"python\" name=\"python\"/> <label for=\"python\">Python</label> <br/> <input type=\"radio\" id=\"c\" name=\"c\"/> <label for=\"c\">C</label> <br/> <input type=\"radio\" id=\"java\" name=\"java\"/> <label for=\"java\">Java</label> <br/> What is your favorite language? (select only one item) Python C Java Gender } label=\"Female\" /> } label=\"Male\" /> } label=\"Other\" /> } label=\"(Disabled option)\" />","title":"Radio Buttons"},{"location":"svg/01-intro/","text":"Introduction to SVG and Canvas SVG Labs Getting Started HTML Template for testing SVG SVG Circle SVG Line SVG Rectangle SVG Ellipse SVG Polygon SVG Polyline SVG Path SVG Text SVG Text Effects SVG Gradients SVG Gallery of Fun Example https://www.w3schools.com/graphics/svg_intro.asp Canvas Canvas is the HTML element that holds a drawing region on a web page using JavaScript. We can use a canvas program to do animations, write games. Before you dive into these labs you will need to know both some SVG and JavaScript to modify the demos.","title":"Introduction"},{"location":"svg/01-intro/#introduction-to-svg-and-canvas","text":"","title":"Introduction to SVG and Canvas"},{"location":"svg/01-intro/#svg-labs","text":"Getting Started HTML Template for testing SVG SVG Circle SVG Line SVG Rectangle SVG Ellipse SVG Polygon SVG Polyline SVG Path SVG Text SVG Text Effects SVG Gradients SVG Gallery of Fun Example https://www.w3schools.com/graphics/svg_intro.asp","title":"SVG Labs"},{"location":"svg/01-intro/#canvas","text":"Canvas is the HTML element that holds a drawing region on a web page using JavaScript. We can use a canvas program to do animations, write games. Before you dive into these labs you will need to know both some SVG and JavaScript to modify the demos.","title":"Canvas"},{"location":"svg/02-circle/","text":"Drawing a Circle with SVG Lets start with drawing a single circle. We will need to tell our web browser to draw it in a region that is 100 pixels high and 100 pixels wide. We then need to tell the web browser where to center the circle in both the X and Y dimensions (cx and cy) and what the radius of the circle should be. Here is an example: <svg height=\"100\" width=\"100\"> <circle cx=\"50\" cy=\"50\" r=\"40\"/> </svg> This example will generate the following circle: That is kind of a dark circle. Let's fill in the circle with blue and make the border be red. We will do this by adding the fill, stroke (for the color of the border) and the stroke-width that will change the width of the border of the circle. <svg height=\"100\" width=\"100\"> <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"red\" stroke-width=\"4\" fill=\"blue\" /> </svg> This will generate the following result: Try changing the color of the fill or the stroke and see what happens! Run on JS Fiddle.net Run on Fiddle","title":"Circle"},{"location":"svg/02-circle/#drawing-a-circle-with-svg","text":"Lets start with drawing a single circle. We will need to tell our web browser to draw it in a region that is 100 pixels high and 100 pixels wide. We then need to tell the web browser where to center the circle in both the X and Y dimensions (cx and cy) and what the radius of the circle should be. Here is an example: <svg height=\"100\" width=\"100\"> <circle cx=\"50\" cy=\"50\" r=\"40\"/> </svg> This example will generate the following circle: That is kind of a dark circle. Let's fill in the circle with blue and make the border be red. We will do this by adding the fill, stroke (for the color of the border) and the stroke-width that will change the width of the border of the circle. <svg height=\"100\" width=\"100\"> <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"red\" stroke-width=\"4\" fill=\"blue\" /> </svg> This will generate the following result: Try changing the color of the fill or the stroke and see what happens!","title":"Drawing a Circle with SVG"},{"location":"svg/02-circle/#run-on-js-fiddlenet","text":"Run on Fiddle","title":"Run on JS Fiddle.net"},{"location":"svg/03-line/","text":"Drawing Lines with SVG <svg height=\"100\" width=\"100\"> <line x1=\"20\" y1=\"10\" x2=\"90\" y2=\"80\" stroke=\"green\" stroke-width=\"5\"/> </svg> This example will generate the following circle:","title":"Line"},{"location":"svg/03-line/#drawing-lines-with-svg","text":"<svg height=\"100\" width=\"100\"> <line x1=\"20\" y1=\"10\" x2=\"90\" y2=\"80\" stroke=\"green\" stroke-width=\"5\"/> </svg> This example will generate the following circle:","title":"Drawing Lines with SVG"},{"location":"svg/04-rectangle/","text":"Drawing Rectangles with SVG <svg height=\"200\" width=\"200\"> <rect x=\"10\" y=\"20\" width=\"150\" height=\"100\" fill=\"lightblue\" stroke-width=\"3\"; stroke=\"purple\" /> </svg> This example will generate the following rectangle:","title":"Rectangle"},{"location":"svg/04-rectangle/#drawing-rectangles-with-svg","text":"<svg height=\"200\" width=\"200\"> <rect x=\"10\" y=\"20\" width=\"150\" height=\"100\" fill=\"lightblue\" stroke-width=\"3\"; stroke=\"purple\" /> </svg> This example will generate the following rectangle:","title":"Drawing Rectangles with SVG"},{"location":"svg/05-ellipse/","text":"Drawing Ellipse with SVG An ellipse can be thought of as a circle that is not perfectly round. The height and width of an ellipse may be different. In SVG, the ellipse element does not have a single radius like a circle, but it has both a horizontal and a vertical radius. Here are the attributes of an ellipse element: cx - the x or horizontal dimension of the circle's center cy - the y or vertical dimension of the circle's center rx - the x or horizontal radius of the ellipse ry - the y or vertical radius of the ellipse Example Markup for SVG Ellipse This example will generate an ellipse: <svg height=\"200\" width=\"200\"> <ellipse cx=\"100\" cy=\"80\" rx=\"100\" ry=\"50\" fill=\"yellow\" stroke-width=\"3\"; stroke=\"purple\" /> </svg> Note that the second line has the color and width of the border. Rendering of SVG Ellipse Note that the first line is about positioning and size. The properties in teh second line can also be determined by SVC CSS properties.","title":"Ellipse"},{"location":"svg/05-ellipse/#drawing-ellipse-with-svg","text":"An ellipse can be thought of as a circle that is not perfectly round. The height and width of an ellipse may be different. In SVG, the ellipse element does not have a single radius like a circle, but it has both a horizontal and a vertical radius. Here are the attributes of an ellipse element: cx - the x or horizontal dimension of the circle's center cy - the y or vertical dimension of the circle's center rx - the x or horizontal radius of the ellipse ry - the y or vertical radius of the ellipse","title":"Drawing Ellipse with SVG"},{"location":"svg/05-ellipse/#example-markup-for-svg-ellipse","text":"This example will generate an ellipse: <svg height=\"200\" width=\"200\"> <ellipse cx=\"100\" cy=\"80\" rx=\"100\" ry=\"50\" fill=\"yellow\" stroke-width=\"3\"; stroke=\"purple\" /> </svg> Note that the second line has the color and width of the border.","title":"Example Markup for SVG Ellipse"},{"location":"svg/05-ellipse/#rendering-of-svg-ellipse","text":"Note that the first line is about positioning and size. The properties in teh second line can also be determined by SVC CSS properties.","title":"Rendering of SVG Ellipse"}]}